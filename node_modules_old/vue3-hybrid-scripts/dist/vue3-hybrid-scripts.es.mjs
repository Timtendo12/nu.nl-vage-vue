import { useSSRContext } from "vue";
const addLinkToPage = (l) => {
  return new Promise((resolve) => {
    const link = document.createElement("link");
    link.setAttribute("rel", "stylesheet");
    link.setAttribute("href", l.href);
    link.setAttribute("data-hybrid-script-id", l.href);
    link.onload = () => {
      window.onHybridScriptLoaded(link);
      resolve();
    };
    link.onerror = (e) => console.log(e);
    document.body.appendChild(link);
  });
};
const addScriptToPage = (s) => {
  return new Promise((resolve) => {
    const script = document.createElement("script");
    script.setAttribute("src", s.src);
    script.setAttribute("data-hybrid-script-id", s.src);
    script.onload = () => {
      console.log("onload");
      window.onHybridScriptLoaded(script);
      resolve();
    };
    script.onerror = (e) => console.log(e);
    document.body.appendChild(script);
  });
};
const allScriptLoaded = (scripts) => {
  let allLoaded = false;
  scripts.filter((s) => s.src).forEach((s) => {
    const script = document.querySelector(`script[data-hybrid-script-id="${s.src}"]`);
    allLoaded = script.getAttribute("data-hybrid-script-loaded") === "true";
  });
  scripts.filter((s) => s.href).forEach((s) => {
    const script = document.querySelector(`link[data-hybrid-script-id="${s.href}"]`);
    allLoaded = script.getAttribute("data-hybrid-script-loaded") === "true";
  });
  return allLoaded;
};
const concat = (list) => Array.prototype.concat.bind(list);
const promiseConcat = (f) => (x) => f().then(concat(x));
const promiseReduce = (acc, x) => acc.then(promiseConcat(x));
const runPromisesSequantially = (funcs) => funcs.reduce(promiseReduce, Promise.resolve([]));
const useHybridScripts = (tag, cb) => {
  let makeArray;
  if (Array.isArray(tag)) {
    makeArray = tag;
  } else {
    makeArray = [tag];
  }
  const tags = makeArray.map((a) => {
    if (typeof a === "string") {
      return a.indexOf(".js") !== -1 ? { src: a } : { href: a };
    } else {
      return a;
    }
  });
  const ssr = typeof window === "undefined";
  if (ssr) {
    const ssrContext = useSSRContext();
    ssrContext.hybridScripts = ssrContext.hybridScripts || new HybridScriptsContext();
    tags.filter((s) => s.href).forEach((s) => {
      ssrContext.hybridScripts.addLink(s);
    });
    tags.filter((s) => s.src).forEach((s) => {
      ssrContext.hybridScripts.addScript(s);
    });
  } else {
    const listenToHybridScriptLoaded = () => {
      if (allScriptLoaded(tags)) {
        window.removeEventListener("hybrid-script-loaded", listenToHybridScriptLoaded);
        cb();
      }
    };
    if (!window.onHybridScriptLoaded) {
      window.onHybridScriptLoaded = function onHybridScriptLoaded(el) {
        el.setAttribute("data-hybrid-script-loaded", "true");
        window.dispatchEvent(new CustomEvent("hybrid-script-loaded"));
      };
    }
    const scriptsThatAreNotOnThePage = tags.filter((s) => s.src).filter((s) => !document.querySelector(`script[data-hybrid-script-id="${s.src}"]`));
    const linksThatAreNotOnThePage = tags.filter((s) => s.href).filter((s) => !document.querySelector(`link[data-hybrid-script-id="${s.href}"]`));
    const addTagsFuncs = [
      ...linksThatAreNotOnThePage.map((s) => () => addLinkToPage(s)),
      ...scriptsThatAreNotOnThePage.map((s) => () => addScriptToPage(s))
    ];
    runPromisesSequantially(addTagsFuncs).then(() => {
      if (allScriptLoaded(tags)) {
        cb();
      } else {
        window.addEventListener("hybrid-script-loaded", listenToHybridScriptLoaded);
      }
    });
    return () => {
      window.removeEventListener("hybrid-script-loaded", listenToHybridScriptLoaded);
    };
  }
};
class HybridScriptsContext {
  constructor() {
    this.scripts = new Set();
    this.links = new Set();
  }
  addScript(script) {
    this.scripts.add(script);
  }
  addLink(link) {
    this.links.add(link);
  }
  render() {
    const scriptsString = Array.from(this.scripts).map((s) => {
      let result = `<script src="${s.src}" data-hybrid-script-id="${s.src}"`;
      result += s.async ? " async" : "";
      result += s.defer ? " defer" : "";
      result += ` onload="onHybridScriptLoaded(this)"><\/script>`;
      return result;
    });
    const linksString = Array.from(this.links).map((s) => `<link href="${s.href}" data-hybrid-script-id="${s.href}" rel="stylesheet" onload="onHybridScriptLoaded(this)">`);
    const baseScript = `<script>function onHybridScriptLoaded(el) { el.setAttribute('data-hybrid-script-loaded', 'true');window.dispatchEvent(new CustomEvent('hybrid-script-loaded'));}<\/script>`;
    return `${[
      baseScript,
      ...linksString,
      ...scriptsString
    ].map((s) => s.replace(/(?:\r\n|\r|\n)/g, "")).join("\r\n")}`;
  }
}
export { HybridScriptsContext, useHybridScripts };
