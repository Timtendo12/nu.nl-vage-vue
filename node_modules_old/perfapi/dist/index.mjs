// src/Client.ts
var Client = class {
  constructor(url, fetcher) {
    this.url = url;
    this.fetcher = fetcher;
  }
  async fetch(data, opener, persistQuery = false) {
    const method = "POST";
    const headers = {
      "Content-Type": "application/json",
      "x-client-user-agent": `nu.nl/1.1 (web,5.0;1;100x100@1)`
    };
    const copyData = {...data};
    return new Promise(async (resolve, reject) => {
      var _a, _b;
      try {
        if (!persistQuery) {
          delete copyData.query;
        }
        const response = await this.fetcher(this.url, {method, headers, body: JSON.stringify(copyData)});
        if (!response.ok) {
          throw new Error("Received error " + response.status + ": " + response.statusText);
        }
        const {data: dataFromJSON, errors} = response.json;
        if (errors && errors.length > 0) {
          if (errors.find((e) => e.message === "PersistedQueryNotFound")) {
            const resultFrom2ndTry = await this.fetch(data, opener, true);
            resolve(resultFrom2ndTry);
          } else {
            throw new Error("Unhandled GraphQL error");
          }
        } else {
          const value = opener(dataFromJSON);
          if (value) {
            resolve(value);
          } else {
            throw new Error("Empty response.");
          }
        }
      } catch (error) {
        reject(((_b = (_a = error.response) == null ? void 0 : _a.data) == null ? void 0 : _b.errors) || [error]);
      }
      ;
    });
  }
  async changedBlocksByLiveblogId(id) {
    const queryString = "query ChangedBlocksByLiveblogId ($id: ID!) { changedBlocksByLiveblogId (id: $id) { __typename successState modifications{ __typename ... on BlockRemovalByGroupIdActionResponse { groupIds successState } ... on BlockReplacementByIdActionResponse { blockId successState blocks {...Block} } } } } fragment Block on Block { __typename groupIds id displayRule{ __typename ... on VariableEqualsRule { variableName variableValue } ... on VariableNotEqualsRule { variableName variableValue } } ... on AudioBlock { embedUrl } ... on BannerBlock { showOnDesktop showOnMobile slotName } ... on ButtonBarBlock { buttonBarPresentationStyle buttonsPresentationStyle buttons{ __typename linkWidth backgroundColorTheme {...ColorTheme} target {...TargetInception} title {...StyledText} } } ... on CarouselLinkBlock { legacySlideshowName viewAspectRatio links {...Link} } ... on ClientSideTimelineBlock { timelineId } ... on CommentBlock { likes replies commentText {...StyledText} dateLabel {...StyledText} likesText {...StyledText} repliesText {...StyledText} respondText {...StyledText} target {...TargetInception} username {...StyledText} usernameLabel{ __typename text {...StyledText} } } ... on ContainerBlock { sideLoadedBlockIds webContainerFlavor{ __typename ... on ArticleMetaContainer { location } ... on ContentListContainer { header template theme GTMTrackers {...GTMTrackers} } ... on StyledWebContainer { cssClass tag attributes{ __typename key value } } } } ... on DetailBlock { summary updatedAt icon {...Image} title {...StyledText} } ... on EmbedBlock { blockFlavor{ __typename ... on InfographicEmbedBlockFlavor { copyright heightHint provider providerUrl url usePym themedUrl{ __typename dark light } } ... on TrackingPixelEmbedBlockFlavor { embedCode } ... on TrackingPixelFlavor { url } ... on TwitterEmbedBlockFlavor { align cards conversation tweetId width } ... on WebEmbedBlockFlavor { embedCode heightHint url } } } ... on ErrorBlock { errorIdentifier message } ... on FormElementBlock { groupId inputValue borderColorTheme {...ColorTheme} fieldLabel {...StyledText} formElementFlavor{ __typename ... on TextFieldFlavor { borderWidth cornerRadius maxlength placeholder borderColorTheme {...ColorTheme} placeholderText {...StyledText} } } target {...TargetInception} value {...StyledText} } ... on HeaderBlock { headerLevel theme subtitle {...StyledText} target {...TargetInception} title {...StyledText} titlePrefixIcon {...Image} titleSuffixIcon {...Image} } ... on ImageBlock { imageStyle image {...Image} imageFlavor{ __typename ... on ArticleHeadImageFlavor { label {...StyledText} title {...StyledText} } ... on FigureImageFlavor { caption {...StyledText} copyright {...StyledText} } ... on SizedImageFlavor { height width } } target {...TargetInception} title {...StyledText} } ... on LinkBlock { grid template type link {...Link} } ... on MenuItemBlock { active icon {...Image} target {...TargetInception} title {...StyledText} } ... on ScoreboardBlock { activeWidgets{ __typename widgetId widgetSetId } widgetSets{ __typename id icon {...Image} title {...StyledText} widgets{ __typename ... on GraceNoteWidget { id leagueId matchId season title {...StyledText} } } } } ... on SourceBlock { icon {...Image} target {...TargetInception} title {...StyledText} } ... on TextBlock { readStateId textRole styledText {...StyledText} textFlavor{ __typename ... on IconTextFlavor { linkAlignment prefixIcon {...Image} suffixIcon {...Image} } ... on LabelTextFlavor { backgroundColor {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on LabeledListItemTextFlavor { leftPadding label {...StyledText} } ... on ListItemTextFlavor { leftPadding bulletColorTheme {...ColorTheme} } ... on SponsoredByTextFlavor { brandIcon {...Image} } } } ... on VideoBlock { caption createdAt duration isLivestream mediaId previewImage {...Image} title {...StyledText} videoFlavor{ __typename ... on ArticleHeaderVideoFlavor { caption createdAt } } videoPlayerFlavor{ __typename ... on EmbedPlayerFlavor { embedCode url } ... on JWPlayerFlavor { adSectionName disableAds playlist } ... on YouTubePlayerFlavor { url } } } ... on WidgetBarBlock { label updatedAt widgetBarStyle widgetBarIcons{ __typename label image {...Image} target {...TargetInception} } } ... on WidgetLinkBlock { link {...Link} } } fragment Link on Link { __typename groupIds linkFlavor{ __typename ... on ButtonLinkFlavor { alignment borderWidth cornerRadius linkWidth backgroundColorTheme {...ColorTheme} borderColorTheme {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on CTALinkFlavor { cta {...StyledText} icon {...Image} title {...StyledText} } ... on CTAWithLargeTextLinkFlavor { body {...StyledText} cta {...StyledText} icon {...Image} } ... on ImageLinkFlavor { image {...Image} } ... on LargeArticleLinkFlavor { estimatedDuration publishedAt icon {...Image} image {...Image} label {...StyledText} labelSuffixIcon {...Image} } ... on MoreLinkFlavor { theme chevronColorTheme {...ColorTheme} } ... on RightIconButtonLinkFlavor { buttonIcon {...Image} icon {...Image} label {...StyledText} } ... on SmallArticleLinkFlavor { estimatedDuration isPartner publishedAt brandIcon {...Image} byline {...StyledText} icon {...Image} image {...Image} label {...StyledText} } ... on SubtitleLinkFlavor { prefixIcon {...Image} subtitle {...StyledText} suffixIcon {...Image} } ... on TextLinkFlavor { linkWidth prefixIcon {...Image} suffixIcon {...Image} } ... on TimelineLinkFlavor { estimatedDuration brandIcon {...Image} byline {...StyledText} colorTheme {...ColorTheme} icon {...Image} image {...Image} label {...StyledText} } ... on ToggleLinkFlavor { enabled icon {...Image} subTitle {...StyledText} } } target {...TargetInception} title {...StyledText} } fragment StyledText on StyledText { __typename text textType linkTargets{ __typename id url target {...TargetInception} } } fragment Target on Target { __typename GTMTrackers {...GTMTrackers} ... on PushSubscribeTarget { pushTag successMessage } } fragment TargetInception on Target { ...Target ... on ActionMenuTarget { actionMenuId } ... on AudioTarget { audioId audioType createdAt duration id shareUrl title updatedAt url thumbnailMedia {...Image} } ... on ConsentTarget { trackers {...TargetTrackers} } ... on ContributionTarget { articleId } ... on FormSubmitTarget { groupId tagIds trackers {...TargetTrackers} } ... on InternalBlockTarget { blockId } ... on JWPlayerVideoTarget { shareUrl } ... on LoginTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on LogoutTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on PushSubscribeTarget { pushTag successMessage } ... on RemoteTarget { action permissions } ... on ScreenTarget { targetId url } ... on SetVariablesTarget { variables{ __typename name value } } ... on ShareTarget { shareText } ... on SlideshowTarget { id slideId } ... on UrlTarget { relation url } ... on VideoTarget { shareUrl } } fragment TargetTrackers on TargetTrackers { __typename activate {...TrackingEvent} } fragment TrackingEvent on TrackingEvent { __typename trackOnceId timerSettings{ __typename minimalTimeThreshold startPolicy stopPolicy timerId timerLeavePolicy timerPolicy } ... on BFFEvent { data eventType } ... on CookieEvent { cookieMaxAge cookieName cookieOperation cookieValue } ... on CxenseEvent { appPlatform category loc shareUrl title } ... on DataLayerScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseTrackingEvent { eventName fields{ __typename key value } } ... on GoogleEvent { action alibi category label value customDimensions {...GoogleIndexedParam} customMetrics {...GoogleIndexedParam} customParams{ __typename key value } } ... on GooglePageviewEvent { alibi page } ... on HttpEvent { body method url headers{ __typename name value } } ... on NoboEvent { isFrontpage screen fields{ __typename key value } } ... on PipTrackingEvent { dpgCampaign dpgContent dpgMedium dpgSource dpgTerm } ... on ReadStateEvent { readStateId } ... on SacEvent { action category label value } ... on SacPageviewEvent { fields{ __typename key value } } ... on SetVariableEvent { variableName variableValue } ... on UsabillaEvent { action category label } } fragment GoogleIndexedParam on GoogleIndexedParam { __typename index value } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment ColorTheme on ColorTheme { __typename id } fragment GTMTrackers on GTMTrackers { __typename click{ __typename action category contentId element isAlgorithmicItem itemId itemLabel itemUrl label list position teaserTitle teaserType } view{ __typename event data{ __typename key value } } }";
    const queryHash = "1e4b6c3ff8d4f428b14691af90684affa53d738ee76f43e56cf048631e46f4eb";
    const variables = {
      id
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "ChangedBlocksByLiveblogId",
      variables
    };
    const opener = (envelop) => envelop.changedBlocksByLiveblogId;
    return this.fetch(parameters, opener);
  }
  async colorThemes() {
    const queryString = "query ColorThemes { colorThemes { __typename id } }";
    const queryHash = "a58790fbd75f9690ee932eafe0f3e59d29870be83cadb5235481950c058b5551";
    const variables = {};
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "ColorThemes",
      variables
    };
    const opener = (envelop) => envelop.colorThemes;
    return this.fetch(parameters, opener);
  }
  async fontInfo(id) {
    const queryString = "query FontInfo ($id: ID!) { fontInfo (id: $id) { __typename id ttf } }";
    const queryHash = "f4d8ec974763688d49b073b4b6c44ac826f55f44b3f4df98ca512c447ef09c08";
    const variables = {
      id
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "FontInfo",
      variables
    };
    const opener = (envelop) => envelop.fontInfo;
    return this.fetch(parameters, opener);
  }
  async menus() {
    const queryString = "query Menus { menus { __typename footerEditorials {...MenuItem} mainMenu {...MenuItem} mainMenuEditorials {...MenuItem} sectionsMenu {...MenuItem} siteOverview {...MenuItem} } } fragment MenuItem on MenuItem { __typename theme title url items{ __typename theme title url } }";
    const queryHash = "0f48166fdefd4f92de57cc99caac22cd4bd2d27e3a614f419acc0f6f2956a287";
    const variables = {};
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "Menus",
      variables
    };
    const opener = (envelop) => envelop.menus;
    return this.fetch(parameters, opener);
  }
  async recommendationsByArticleID(id) {
    const queryString = "query RecommendationsByArticleID ($id: ID!) { recommendationsByArticleID (id: $id) { __typename blocks {...Block} sideLoadedBlocks {...Block} sidebarBlocks {...Block} topzoneBlocks {...Block} } } fragment Block on Block { __typename groupIds id displayRule{ __typename ... on VariableEqualsRule { variableName variableValue } ... on VariableNotEqualsRule { variableName variableValue } } ... on AudioBlock { embedUrl } ... on BannerBlock { showOnDesktop showOnMobile slotName } ... on ButtonBarBlock { buttonBarPresentationStyle buttonsPresentationStyle buttons{ __typename linkWidth backgroundColorTheme {...ColorTheme} target {...TargetInception} title {...StyledText} } } ... on CarouselLinkBlock { legacySlideshowName viewAspectRatio links {...Link} } ... on ClientSideTimelineBlock { timelineId } ... on CommentBlock { likes replies commentText {...StyledText} dateLabel {...StyledText} likesText {...StyledText} repliesText {...StyledText} respondText {...StyledText} target {...TargetInception} username {...StyledText} usernameLabel{ __typename text {...StyledText} } } ... on ContainerBlock { sideLoadedBlockIds webContainerFlavor{ __typename ... on ArticleMetaContainer { location } ... on ContentListContainer { header template theme GTMTrackers {...GTMTrackers} } ... on StyledWebContainer { cssClass tag attributes{ __typename key value } } } } ... on DetailBlock { summary updatedAt icon {...Image} title {...StyledText} } ... on EmbedBlock { blockFlavor{ __typename ... on InfographicEmbedBlockFlavor { copyright heightHint provider providerUrl url usePym themedUrl{ __typename dark light } } ... on TrackingPixelEmbedBlockFlavor { embedCode } ... on TrackingPixelFlavor { url } ... on TwitterEmbedBlockFlavor { align cards conversation tweetId width } ... on WebEmbedBlockFlavor { embedCode heightHint url } } } ... on ErrorBlock { errorIdentifier message } ... on FormElementBlock { groupId inputValue borderColorTheme {...ColorTheme} fieldLabel {...StyledText} formElementFlavor{ __typename ... on TextFieldFlavor { borderWidth cornerRadius maxlength placeholder borderColorTheme {...ColorTheme} placeholderText {...StyledText} } } target {...TargetInception} value {...StyledText} } ... on HeaderBlock { headerLevel theme subtitle {...StyledText} target {...TargetInception} title {...StyledText} titlePrefixIcon {...Image} titleSuffixIcon {...Image} } ... on ImageBlock { imageStyle image {...Image} imageFlavor{ __typename ... on ArticleHeadImageFlavor { label {...StyledText} title {...StyledText} } ... on FigureImageFlavor { caption {...StyledText} copyright {...StyledText} } ... on SizedImageFlavor { height width } } target {...TargetInception} title {...StyledText} } ... on LinkBlock { grid template type link {...Link} } ... on MenuItemBlock { active icon {...Image} target {...TargetInception} title {...StyledText} } ... on ScoreboardBlock { activeWidgets{ __typename widgetId widgetSetId } widgetSets{ __typename id icon {...Image} title {...StyledText} widgets{ __typename ... on GraceNoteWidget { id leagueId matchId season title {...StyledText} } } } } ... on SourceBlock { icon {...Image} target {...TargetInception} title {...StyledText} } ... on TextBlock { readStateId textRole styledText {...StyledText} textFlavor{ __typename ... on IconTextFlavor { linkAlignment prefixIcon {...Image} suffixIcon {...Image} } ... on LabelTextFlavor { backgroundColor {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on LabeledListItemTextFlavor { leftPadding label {...StyledText} } ... on ListItemTextFlavor { leftPadding bulletColorTheme {...ColorTheme} } ... on SponsoredByTextFlavor { brandIcon {...Image} } } } ... on VideoBlock { caption createdAt duration isLivestream mediaId previewImage {...Image} title {...StyledText} videoFlavor{ __typename ... on ArticleHeaderVideoFlavor { caption createdAt } } videoPlayerFlavor{ __typename ... on EmbedPlayerFlavor { embedCode url } ... on JWPlayerFlavor { adSectionName disableAds playlist } ... on YouTubePlayerFlavor { url } } } ... on WidgetBarBlock { label updatedAt widgetBarStyle widgetBarIcons{ __typename label image {...Image} target {...TargetInception} } } ... on WidgetLinkBlock { link {...Link} } } fragment Link on Link { __typename groupIds linkFlavor{ __typename ... on ButtonLinkFlavor { alignment borderWidth cornerRadius linkWidth backgroundColorTheme {...ColorTheme} borderColorTheme {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on CTALinkFlavor { cta {...StyledText} icon {...Image} title {...StyledText} } ... on CTAWithLargeTextLinkFlavor { body {...StyledText} cta {...StyledText} icon {...Image} } ... on ImageLinkFlavor { image {...Image} } ... on LargeArticleLinkFlavor { estimatedDuration publishedAt icon {...Image} image {...Image} label {...StyledText} labelSuffixIcon {...Image} } ... on MoreLinkFlavor { theme chevronColorTheme {...ColorTheme} } ... on RightIconButtonLinkFlavor { buttonIcon {...Image} icon {...Image} label {...StyledText} } ... on SmallArticleLinkFlavor { estimatedDuration isPartner publishedAt brandIcon {...Image} byline {...StyledText} icon {...Image} image {...Image} label {...StyledText} } ... on SubtitleLinkFlavor { prefixIcon {...Image} subtitle {...StyledText} suffixIcon {...Image} } ... on TextLinkFlavor { linkWidth prefixIcon {...Image} suffixIcon {...Image} } ... on TimelineLinkFlavor { estimatedDuration brandIcon {...Image} byline {...StyledText} colorTheme {...ColorTheme} icon {...Image} image {...Image} label {...StyledText} } ... on ToggleLinkFlavor { enabled icon {...Image} subTitle {...StyledText} } } target {...TargetInception} title {...StyledText} } fragment StyledText on StyledText { __typename text textType linkTargets{ __typename id url target {...TargetInception} } } fragment Target on Target { __typename GTMTrackers {...GTMTrackers} ... on PushSubscribeTarget { pushTag successMessage } } fragment TargetInception on Target { ...Target ... on ActionMenuTarget { actionMenuId } ... on AudioTarget { audioId audioType createdAt duration id shareUrl title updatedAt url thumbnailMedia {...Image} } ... on ConsentTarget { trackers {...TargetTrackers} } ... on ContributionTarget { articleId } ... on FormSubmitTarget { groupId tagIds trackers {...TargetTrackers} } ... on InternalBlockTarget { blockId } ... on JWPlayerVideoTarget { shareUrl } ... on LoginTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on LogoutTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on PushSubscribeTarget { pushTag successMessage } ... on RemoteTarget { action permissions } ... on ScreenTarget { targetId url } ... on SetVariablesTarget { variables{ __typename name value } } ... on ShareTarget { shareText } ... on SlideshowTarget { id slideId } ... on UrlTarget { relation url } ... on VideoTarget { shareUrl } } fragment TargetTrackers on TargetTrackers { __typename activate {...TrackingEvent} } fragment TrackingEvent on TrackingEvent { __typename trackOnceId timerSettings{ __typename minimalTimeThreshold startPolicy stopPolicy timerId timerLeavePolicy timerPolicy } ... on BFFEvent { data eventType } ... on CookieEvent { cookieMaxAge cookieName cookieOperation cookieValue } ... on CxenseEvent { appPlatform category loc shareUrl title } ... on DataLayerScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseTrackingEvent { eventName fields{ __typename key value } } ... on GoogleEvent { action alibi category label value customDimensions {...GoogleIndexedParam} customMetrics {...GoogleIndexedParam} customParams{ __typename key value } } ... on GooglePageviewEvent { alibi page } ... on HttpEvent { body method url headers{ __typename name value } } ... on NoboEvent { isFrontpage screen fields{ __typename key value } } ... on PipTrackingEvent { dpgCampaign dpgContent dpgMedium dpgSource dpgTerm } ... on ReadStateEvent { readStateId } ... on SacEvent { action category label value } ... on SacPageviewEvent { fields{ __typename key value } } ... on SetVariableEvent { variableName variableValue } ... on UsabillaEvent { action category label } } fragment GoogleIndexedParam on GoogleIndexedParam { __typename index value } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment ColorTheme on ColorTheme { __typename id } fragment GTMTrackers on GTMTrackers { __typename click{ __typename action category contentId element isAlgorithmicItem itemId itemLabel itemUrl label list position teaserTitle teaserType } view{ __typename event data{ __typename key value } } }";
    const queryHash = "f9e7d35c1857a2006d3e78c2981dbf52b9453f1524f2468771d3d52d6bc4da93";
    const variables = {
      id
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "RecommendationsByArticleID",
      variables
    };
    const opener = (envelop) => envelop.recommendationsByArticleID;
    return this.fetch(parameters, opener);
  }
  async recommendedArticles(url) {
    const queryString = "query RecommendedArticles ($url: Url!) { recommendedArticles (url: $url) { __typename blocks {...Block} sideLoadedBlocks {...Block} sidebarBlocks {...Block} topzoneBlocks {...Block} } } fragment Block on Block { __typename groupIds id displayRule{ __typename ... on VariableEqualsRule { variableName variableValue } ... on VariableNotEqualsRule { variableName variableValue } } ... on AudioBlock { embedUrl } ... on BannerBlock { showOnDesktop showOnMobile slotName } ... on ButtonBarBlock { buttonBarPresentationStyle buttonsPresentationStyle buttons{ __typename linkWidth backgroundColorTheme {...ColorTheme} target {...TargetInception} title {...StyledText} } } ... on CarouselLinkBlock { legacySlideshowName viewAspectRatio links {...Link} } ... on ClientSideTimelineBlock { timelineId } ... on CommentBlock { likes replies commentText {...StyledText} dateLabel {...StyledText} likesText {...StyledText} repliesText {...StyledText} respondText {...StyledText} target {...TargetInception} username {...StyledText} usernameLabel{ __typename text {...StyledText} } } ... on ContainerBlock { sideLoadedBlockIds webContainerFlavor{ __typename ... on ArticleMetaContainer { location } ... on ContentListContainer { header template theme GTMTrackers {...GTMTrackers} } ... on StyledWebContainer { cssClass tag attributes{ __typename key value } } } } ... on DetailBlock { summary updatedAt icon {...Image} title {...StyledText} } ... on EmbedBlock { blockFlavor{ __typename ... on InfographicEmbedBlockFlavor { copyright heightHint provider providerUrl url usePym themedUrl{ __typename dark light } } ... on TrackingPixelEmbedBlockFlavor { embedCode } ... on TrackingPixelFlavor { url } ... on TwitterEmbedBlockFlavor { align cards conversation tweetId width } ... on WebEmbedBlockFlavor { embedCode heightHint url } } } ... on ErrorBlock { errorIdentifier message } ... on FormElementBlock { groupId inputValue borderColorTheme {...ColorTheme} fieldLabel {...StyledText} formElementFlavor{ __typename ... on TextFieldFlavor { borderWidth cornerRadius maxlength placeholder borderColorTheme {...ColorTheme} placeholderText {...StyledText} } } target {...TargetInception} value {...StyledText} } ... on HeaderBlock { headerLevel theme subtitle {...StyledText} target {...TargetInception} title {...StyledText} titlePrefixIcon {...Image} titleSuffixIcon {...Image} } ... on ImageBlock { imageStyle image {...Image} imageFlavor{ __typename ... on ArticleHeadImageFlavor { label {...StyledText} title {...StyledText} } ... on FigureImageFlavor { caption {...StyledText} copyright {...StyledText} } ... on SizedImageFlavor { height width } } target {...TargetInception} title {...StyledText} } ... on LinkBlock { grid template type link {...Link} } ... on MenuItemBlock { active icon {...Image} target {...TargetInception} title {...StyledText} } ... on ScoreboardBlock { activeWidgets{ __typename widgetId widgetSetId } widgetSets{ __typename id icon {...Image} title {...StyledText} widgets{ __typename ... on GraceNoteWidget { id leagueId matchId season title {...StyledText} } } } } ... on SourceBlock { icon {...Image} target {...TargetInception} title {...StyledText} } ... on TextBlock { readStateId textRole styledText {...StyledText} textFlavor{ __typename ... on IconTextFlavor { linkAlignment prefixIcon {...Image} suffixIcon {...Image} } ... on LabelTextFlavor { backgroundColor {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on LabeledListItemTextFlavor { leftPadding label {...StyledText} } ... on ListItemTextFlavor { leftPadding bulletColorTheme {...ColorTheme} } ... on SponsoredByTextFlavor { brandIcon {...Image} } } } ... on VideoBlock { caption createdAt duration isLivestream mediaId previewImage {...Image} title {...StyledText} videoFlavor{ __typename ... on ArticleHeaderVideoFlavor { caption createdAt } } videoPlayerFlavor{ __typename ... on EmbedPlayerFlavor { embedCode url } ... on JWPlayerFlavor { adSectionName disableAds playlist } ... on YouTubePlayerFlavor { url } } } ... on WidgetBarBlock { label updatedAt widgetBarStyle widgetBarIcons{ __typename label image {...Image} target {...TargetInception} } } ... on WidgetLinkBlock { link {...Link} } } fragment Link on Link { __typename groupIds linkFlavor{ __typename ... on ButtonLinkFlavor { alignment borderWidth cornerRadius linkWidth backgroundColorTheme {...ColorTheme} borderColorTheme {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on CTALinkFlavor { cta {...StyledText} icon {...Image} title {...StyledText} } ... on CTAWithLargeTextLinkFlavor { body {...StyledText} cta {...StyledText} icon {...Image} } ... on ImageLinkFlavor { image {...Image} } ... on LargeArticleLinkFlavor { estimatedDuration publishedAt icon {...Image} image {...Image} label {...StyledText} labelSuffixIcon {...Image} } ... on MoreLinkFlavor { theme chevronColorTheme {...ColorTheme} } ... on RightIconButtonLinkFlavor { buttonIcon {...Image} icon {...Image} label {...StyledText} } ... on SmallArticleLinkFlavor { estimatedDuration isPartner publishedAt brandIcon {...Image} byline {...StyledText} icon {...Image} image {...Image} label {...StyledText} } ... on SubtitleLinkFlavor { prefixIcon {...Image} subtitle {...StyledText} suffixIcon {...Image} } ... on TextLinkFlavor { linkWidth prefixIcon {...Image} suffixIcon {...Image} } ... on TimelineLinkFlavor { estimatedDuration brandIcon {...Image} byline {...StyledText} colorTheme {...ColorTheme} icon {...Image} image {...Image} label {...StyledText} } ... on ToggleLinkFlavor { enabled icon {...Image} subTitle {...StyledText} } } target {...TargetInception} title {...StyledText} } fragment StyledText on StyledText { __typename text textType linkTargets{ __typename id url target {...TargetInception} } } fragment Target on Target { __typename GTMTrackers {...GTMTrackers} ... on PushSubscribeTarget { pushTag successMessage } } fragment TargetInception on Target { ...Target ... on ActionMenuTarget { actionMenuId } ... on AudioTarget { audioId audioType createdAt duration id shareUrl title updatedAt url thumbnailMedia {...Image} } ... on ConsentTarget { trackers {...TargetTrackers} } ... on ContributionTarget { articleId } ... on FormSubmitTarget { groupId tagIds trackers {...TargetTrackers} } ... on InternalBlockTarget { blockId } ... on JWPlayerVideoTarget { shareUrl } ... on LoginTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on LogoutTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on PushSubscribeTarget { pushTag successMessage } ... on RemoteTarget { action permissions } ... on ScreenTarget { targetId url } ... on SetVariablesTarget { variables{ __typename name value } } ... on ShareTarget { shareText } ... on SlideshowTarget { id slideId } ... on UrlTarget { relation url } ... on VideoTarget { shareUrl } } fragment TargetTrackers on TargetTrackers { __typename activate {...TrackingEvent} } fragment TrackingEvent on TrackingEvent { __typename trackOnceId timerSettings{ __typename minimalTimeThreshold startPolicy stopPolicy timerId timerLeavePolicy timerPolicy } ... on BFFEvent { data eventType } ... on CookieEvent { cookieMaxAge cookieName cookieOperation cookieValue } ... on CxenseEvent { appPlatform category loc shareUrl title } ... on DataLayerScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseTrackingEvent { eventName fields{ __typename key value } } ... on GoogleEvent { action alibi category label value customDimensions {...GoogleIndexedParam} customMetrics {...GoogleIndexedParam} customParams{ __typename key value } } ... on GooglePageviewEvent { alibi page } ... on HttpEvent { body method url headers{ __typename name value } } ... on NoboEvent { isFrontpage screen fields{ __typename key value } } ... on PipTrackingEvent { dpgCampaign dpgContent dpgMedium dpgSource dpgTerm } ... on ReadStateEvent { readStateId } ... on SacEvent { action category label value } ... on SacPageviewEvent { fields{ __typename key value } } ... on SetVariableEvent { variableName variableValue } ... on UsabillaEvent { action category label } } fragment GoogleIndexedParam on GoogleIndexedParam { __typename index value } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment ColorTheme on ColorTheme { __typename id } fragment GTMTrackers on GTMTrackers { __typename click{ __typename action category contentId element isAlgorithmicItem itemId itemLabel itemUrl label list position teaserTitle teaserType } view{ __typename event data{ __typename key value } } }";
    const queryHash = "e7f432fff7cc0d8b03f88c49fe91d7407845cbaa8032d06c8628058603c71d0a";
    const variables = {
      url
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "RecommendedArticles",
      variables
    };
    const opener = (envelop) => envelop.recommendedArticles;
    return this.fetch(parameters, opener);
  }
  async screenByEntryPoint(entryPoint) {
    const queryString = "query ScreenByEntryPoint ($entryPoint: ScreenEntryPoint!) { screenByEntryPoint (entryPoint: $entryPoint) { __typename commentsCount commentsEnabled id schemaOrgString screenCanonicalUrl sectionTheme title updatedAt actions{ __typename hide {...LocalAction} show {...LocalAction} } advertisementData{ __typename key value } firstBlockPage{ __typename blocks {...Block} sideLoadedBlocks {...Block} sidebarBlocks {...Block} topzoneBlocks {...Block} } grids{ __typename id narrowColumnCount wideColumnCount } httpResponse{ __typename redirectUrl statusCode } primaryColorTheme {...ColorTheme} screenMetadata{ __typename key value } screenOgData{ __typename key value } trackers{ __typename hide {...TrackingEvent} pullRefresh {...TrackingEvent} show {...TrackingEvent} } twitterCardData{ __typename key value } variables {...Variable} } } fragment Variable on Variable { __typename name value } fragment TrackingEvent on TrackingEvent { __typename trackOnceId timerSettings{ __typename minimalTimeThreshold startPolicy stopPolicy timerId timerLeavePolicy timerPolicy } ... on BFFEvent { data eventType } ... on CookieEvent { cookieMaxAge cookieName cookieOperation cookieValue } ... on CxenseEvent { appPlatform category loc shareUrl title } ... on DataLayerScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseTrackingEvent { eventName fields{ __typename key value } } ... on GoogleEvent { action alibi category label value customDimensions {...GoogleIndexedParam} customMetrics {...GoogleIndexedParam} customParams{ __typename key value } } ... on GooglePageviewEvent { alibi page } ... on HttpEvent { body method url headers{ __typename name value } } ... on NoboEvent { isFrontpage screen fields{ __typename key value } } ... on PipTrackingEvent { dpgCampaign dpgContent dpgMedium dpgSource dpgTerm } ... on ReadStateEvent { readStateId } ... on SacEvent { action category label value } ... on SacPageviewEvent { fields{ __typename key value } } ... on SetVariableEvent { variableName variableValue } ... on UsabillaEvent { action category label } } fragment GoogleIndexedParam on GoogleIndexedParam { __typename index value } fragment ColorTheme on ColorTheme { __typename id } fragment Block on Block { __typename groupIds id displayRule{ __typename ... on VariableEqualsRule { variableName variableValue } ... on VariableNotEqualsRule { variableName variableValue } } ... on AudioBlock { embedUrl } ... on BannerBlock { showOnDesktop showOnMobile slotName } ... on ButtonBarBlock { buttonBarPresentationStyle buttonsPresentationStyle buttons{ __typename linkWidth backgroundColorTheme {...ColorTheme} target {...TargetInception} title {...StyledText} } } ... on CarouselLinkBlock { legacySlideshowName viewAspectRatio links {...Link} } ... on ClientSideTimelineBlock { timelineId } ... on CommentBlock { likes replies commentText {...StyledText} dateLabel {...StyledText} likesText {...StyledText} repliesText {...StyledText} respondText {...StyledText} target {...TargetInception} username {...StyledText} usernameLabel{ __typename text {...StyledText} } } ... on ContainerBlock { sideLoadedBlockIds webContainerFlavor{ __typename ... on ArticleMetaContainer { location } ... on ContentListContainer { header template theme GTMTrackers {...GTMTrackers} } ... on StyledWebContainer { cssClass tag attributes{ __typename key value } } } } ... on DetailBlock { summary updatedAt icon {...Image} title {...StyledText} } ... on EmbedBlock { blockFlavor{ __typename ... on InfographicEmbedBlockFlavor { copyright heightHint provider providerUrl url usePym themedUrl{ __typename dark light } } ... on TrackingPixelEmbedBlockFlavor { embedCode } ... on TrackingPixelFlavor { url } ... on TwitterEmbedBlockFlavor { align cards conversation tweetId width } ... on WebEmbedBlockFlavor { embedCode heightHint url } } } ... on ErrorBlock { errorIdentifier message } ... on FormElementBlock { groupId inputValue borderColorTheme {...ColorTheme} fieldLabel {...StyledText} formElementFlavor{ __typename ... on TextFieldFlavor { borderWidth cornerRadius maxlength placeholder borderColorTheme {...ColorTheme} placeholderText {...StyledText} } } target {...TargetInception} value {...StyledText} } ... on HeaderBlock { headerLevel theme subtitle {...StyledText} target {...TargetInception} title {...StyledText} titlePrefixIcon {...Image} titleSuffixIcon {...Image} } ... on ImageBlock { imageStyle image {...Image} imageFlavor{ __typename ... on ArticleHeadImageFlavor { label {...StyledText} title {...StyledText} } ... on FigureImageFlavor { caption {...StyledText} copyright {...StyledText} } ... on SizedImageFlavor { height width } } target {...TargetInception} title {...StyledText} } ... on LinkBlock { grid template type link {...Link} } ... on MenuItemBlock { active icon {...Image} target {...TargetInception} title {...StyledText} } ... on ScoreboardBlock { activeWidgets{ __typename widgetId widgetSetId } widgetSets{ __typename id icon {...Image} title {...StyledText} widgets{ __typename ... on GraceNoteWidget { id leagueId matchId season title {...StyledText} } } } } ... on SourceBlock { icon {...Image} target {...TargetInception} title {...StyledText} } ... on TextBlock { readStateId textRole styledText {...StyledText} textFlavor{ __typename ... on IconTextFlavor { linkAlignment prefixIcon {...Image} suffixIcon {...Image} } ... on LabelTextFlavor { backgroundColor {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on LabeledListItemTextFlavor { leftPadding label {...StyledText} } ... on ListItemTextFlavor { leftPadding bulletColorTheme {...ColorTheme} } ... on SponsoredByTextFlavor { brandIcon {...Image} } } } ... on VideoBlock { caption createdAt duration isLivestream mediaId previewImage {...Image} title {...StyledText} videoFlavor{ __typename ... on ArticleHeaderVideoFlavor { caption createdAt } } videoPlayerFlavor{ __typename ... on EmbedPlayerFlavor { embedCode url } ... on JWPlayerFlavor { adSectionName disableAds playlist } ... on YouTubePlayerFlavor { url } } } ... on WidgetBarBlock { label updatedAt widgetBarStyle widgetBarIcons{ __typename label image {...Image} target {...TargetInception} } } ... on WidgetLinkBlock { link {...Link} } } fragment Link on Link { __typename groupIds linkFlavor{ __typename ... on ButtonLinkFlavor { alignment borderWidth cornerRadius linkWidth backgroundColorTheme {...ColorTheme} borderColorTheme {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on CTALinkFlavor { cta {...StyledText} icon {...Image} title {...StyledText} } ... on CTAWithLargeTextLinkFlavor { body {...StyledText} cta {...StyledText} icon {...Image} } ... on ImageLinkFlavor { image {...Image} } ... on LargeArticleLinkFlavor { estimatedDuration publishedAt icon {...Image} image {...Image} label {...StyledText} labelSuffixIcon {...Image} } ... on MoreLinkFlavor { theme chevronColorTheme {...ColorTheme} } ... on RightIconButtonLinkFlavor { buttonIcon {...Image} icon {...Image} label {...StyledText} } ... on SmallArticleLinkFlavor { estimatedDuration isPartner publishedAt brandIcon {...Image} byline {...StyledText} icon {...Image} image {...Image} label {...StyledText} } ... on SubtitleLinkFlavor { prefixIcon {...Image} subtitle {...StyledText} suffixIcon {...Image} } ... on TextLinkFlavor { linkWidth prefixIcon {...Image} suffixIcon {...Image} } ... on TimelineLinkFlavor { estimatedDuration brandIcon {...Image} byline {...StyledText} colorTheme {...ColorTheme} icon {...Image} image {...Image} label {...StyledText} } ... on ToggleLinkFlavor { enabled icon {...Image} subTitle {...StyledText} } } target {...TargetInception} title {...StyledText} } fragment StyledText on StyledText { __typename text textType linkTargets{ __typename id url target {...TargetInception} } } fragment Target on Target { __typename GTMTrackers {...GTMTrackers} ... on PushSubscribeTarget { pushTag successMessage } } fragment TargetInception on Target { ...Target ... on ActionMenuTarget { actionMenuId } ... on AudioTarget { audioId audioType createdAt duration id shareUrl title updatedAt url thumbnailMedia {...Image} } ... on ConsentTarget { trackers {...TargetTrackers} } ... on ContributionTarget { articleId } ... on FormSubmitTarget { groupId tagIds trackers {...TargetTrackers} } ... on InternalBlockTarget { blockId } ... on JWPlayerVideoTarget { shareUrl } ... on LoginTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on LogoutTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on PushSubscribeTarget { pushTag successMessage } ... on RemoteTarget { action permissions } ... on ScreenTarget { targetId url } ... on SetVariablesTarget { variables {...Variable} } ... on ShareTarget { shareText } ... on SlideshowTarget { id slideId } ... on UrlTarget { relation url } ... on VideoTarget { shareUrl } } fragment TargetTrackers on TargetTrackers { __typename activate {...TrackingEvent} } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment GTMTrackers on GTMTrackers { __typename click{ __typename action category contentId element isAlgorithmicItem itemId itemLabel itemUrl label list position teaserTitle teaserType } view{ __typename event data{ __typename key value } } } fragment LocalAction on LocalAction { __typename executeOnceId ... on LiveDataConnectionAction { actionHandler liveDataEventSource{ __typename ... on FirebaseRealTimeDataEventSource { connectionString itemId addTarget {...TargetInception} removeTarget {...TargetInception} updateTarget {...TargetInception} } } } }";
    const queryHash = "f3528b9c6434a07501eca3c2760360c43c7a569b3bb2d0c5bf7b950e849f6de7";
    const variables = {
      entryPoint
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "ScreenByEntryPoint",
      variables
    };
    const opener = (envelop) => envelop.screenByEntryPoint;
    return this.fetch(parameters, opener);
  }
  async screenByUrl(url) {
    const queryString = "query ScreenByUrl ($url: Url!) { screenByUrl (url: $url) { __typename commentsCount commentsEnabled id schemaOrgString screenCanonicalUrl sectionTheme title updatedAt actions{ __typename hide {...LocalAction} show {...LocalAction} } advertisementData{ __typename key value } firstBlockPage{ __typename blocks {...Block} sideLoadedBlocks {...Block} sidebarBlocks {...Block} topzoneBlocks {...Block} } grids{ __typename id narrowColumnCount wideColumnCount } httpResponse{ __typename redirectUrl statusCode } primaryColorTheme {...ColorTheme} screenMetadata{ __typename key value } screenOgData{ __typename key value } trackers{ __typename hide {...TrackingEvent} pullRefresh {...TrackingEvent} show {...TrackingEvent} } twitterCardData{ __typename key value } variables {...Variable} } } fragment Variable on Variable { __typename name value } fragment TrackingEvent on TrackingEvent { __typename trackOnceId timerSettings{ __typename minimalTimeThreshold startPolicy stopPolicy timerId timerLeavePolicy timerPolicy } ... on BFFEvent { data eventType } ... on CookieEvent { cookieMaxAge cookieName cookieOperation cookieValue } ... on CxenseEvent { appPlatform category loc shareUrl title } ... on DataLayerScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseTrackingEvent { eventName fields{ __typename key value } } ... on GoogleEvent { action alibi category label value customDimensions {...GoogleIndexedParam} customMetrics {...GoogleIndexedParam} customParams{ __typename key value } } ... on GooglePageviewEvent { alibi page } ... on HttpEvent { body method url headers{ __typename name value } } ... on NoboEvent { isFrontpage screen fields{ __typename key value } } ... on PipTrackingEvent { dpgCampaign dpgContent dpgMedium dpgSource dpgTerm } ... on ReadStateEvent { readStateId } ... on SacEvent { action category label value } ... on SacPageviewEvent { fields{ __typename key value } } ... on SetVariableEvent { variableName variableValue } ... on UsabillaEvent { action category label } } fragment GoogleIndexedParam on GoogleIndexedParam { __typename index value } fragment ColorTheme on ColorTheme { __typename id } fragment Block on Block { __typename groupIds id displayRule{ __typename ... on VariableEqualsRule { variableName variableValue } ... on VariableNotEqualsRule { variableName variableValue } } ... on AudioBlock { embedUrl } ... on BannerBlock { showOnDesktop showOnMobile slotName } ... on ButtonBarBlock { buttonBarPresentationStyle buttonsPresentationStyle buttons{ __typename linkWidth backgroundColorTheme {...ColorTheme} target {...TargetInception} title {...StyledText} } } ... on CarouselLinkBlock { legacySlideshowName viewAspectRatio links {...Link} } ... on ClientSideTimelineBlock { timelineId } ... on CommentBlock { likes replies commentText {...StyledText} dateLabel {...StyledText} likesText {...StyledText} repliesText {...StyledText} respondText {...StyledText} target {...TargetInception} username {...StyledText} usernameLabel{ __typename text {...StyledText} } } ... on ContainerBlock { sideLoadedBlockIds webContainerFlavor{ __typename ... on ArticleMetaContainer { location } ... on ContentListContainer { header template theme GTMTrackers {...GTMTrackers} } ... on StyledWebContainer { cssClass tag attributes{ __typename key value } } } } ... on DetailBlock { summary updatedAt icon {...Image} title {...StyledText} } ... on EmbedBlock { blockFlavor{ __typename ... on InfographicEmbedBlockFlavor { copyright heightHint provider providerUrl url usePym themedUrl{ __typename dark light } } ... on TrackingPixelEmbedBlockFlavor { embedCode } ... on TrackingPixelFlavor { url } ... on TwitterEmbedBlockFlavor { align cards conversation tweetId width } ... on WebEmbedBlockFlavor { embedCode heightHint url } } } ... on ErrorBlock { errorIdentifier message } ... on FormElementBlock { groupId inputValue borderColorTheme {...ColorTheme} fieldLabel {...StyledText} formElementFlavor{ __typename ... on TextFieldFlavor { borderWidth cornerRadius maxlength placeholder borderColorTheme {...ColorTheme} placeholderText {...StyledText} } } target {...TargetInception} value {...StyledText} } ... on HeaderBlock { headerLevel theme subtitle {...StyledText} target {...TargetInception} title {...StyledText} titlePrefixIcon {...Image} titleSuffixIcon {...Image} } ... on ImageBlock { imageStyle image {...Image} imageFlavor{ __typename ... on ArticleHeadImageFlavor { label {...StyledText} title {...StyledText} } ... on FigureImageFlavor { caption {...StyledText} copyright {...StyledText} } ... on SizedImageFlavor { height width } } target {...TargetInception} title {...StyledText} } ... on LinkBlock { grid template type link {...Link} } ... on MenuItemBlock { active icon {...Image} target {...TargetInception} title {...StyledText} } ... on ScoreboardBlock { activeWidgets{ __typename widgetId widgetSetId } widgetSets{ __typename id icon {...Image} title {...StyledText} widgets{ __typename ... on GraceNoteWidget { id leagueId matchId season title {...StyledText} } } } } ... on SourceBlock { icon {...Image} target {...TargetInception} title {...StyledText} } ... on TextBlock { readStateId textRole styledText {...StyledText} textFlavor{ __typename ... on IconTextFlavor { linkAlignment prefixIcon {...Image} suffixIcon {...Image} } ... on LabelTextFlavor { backgroundColor {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on LabeledListItemTextFlavor { leftPadding label {...StyledText} } ... on ListItemTextFlavor { leftPadding bulletColorTheme {...ColorTheme} } ... on SponsoredByTextFlavor { brandIcon {...Image} } } } ... on VideoBlock { caption createdAt duration isLivestream mediaId previewImage {...Image} title {...StyledText} videoFlavor{ __typename ... on ArticleHeaderVideoFlavor { caption createdAt } } videoPlayerFlavor{ __typename ... on EmbedPlayerFlavor { embedCode url } ... on JWPlayerFlavor { adSectionName disableAds playlist } ... on YouTubePlayerFlavor { url } } } ... on WidgetBarBlock { label updatedAt widgetBarStyle widgetBarIcons{ __typename label image {...Image} target {...TargetInception} } } ... on WidgetLinkBlock { link {...Link} } } fragment Link on Link { __typename groupIds linkFlavor{ __typename ... on ButtonLinkFlavor { alignment borderWidth cornerRadius linkWidth backgroundColorTheme {...ColorTheme} borderColorTheme {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on CTALinkFlavor { cta {...StyledText} icon {...Image} title {...StyledText} } ... on CTAWithLargeTextLinkFlavor { body {...StyledText} cta {...StyledText} icon {...Image} } ... on ImageLinkFlavor { image {...Image} } ... on LargeArticleLinkFlavor { estimatedDuration publishedAt icon {...Image} image {...Image} label {...StyledText} labelSuffixIcon {...Image} } ... on MoreLinkFlavor { theme chevronColorTheme {...ColorTheme} } ... on RightIconButtonLinkFlavor { buttonIcon {...Image} icon {...Image} label {...StyledText} } ... on SmallArticleLinkFlavor { estimatedDuration isPartner publishedAt brandIcon {...Image} byline {...StyledText} icon {...Image} image {...Image} label {...StyledText} } ... on SubtitleLinkFlavor { prefixIcon {...Image} subtitle {...StyledText} suffixIcon {...Image} } ... on TextLinkFlavor { linkWidth prefixIcon {...Image} suffixIcon {...Image} } ... on TimelineLinkFlavor { estimatedDuration brandIcon {...Image} byline {...StyledText} colorTheme {...ColorTheme} icon {...Image} image {...Image} label {...StyledText} } ... on ToggleLinkFlavor { enabled icon {...Image} subTitle {...StyledText} } } target {...TargetInception} title {...StyledText} } fragment StyledText on StyledText { __typename text textType linkTargets{ __typename id url target {...TargetInception} } } fragment Target on Target { __typename GTMTrackers {...GTMTrackers} ... on PushSubscribeTarget { pushTag successMessage } } fragment TargetInception on Target { ...Target ... on ActionMenuTarget { actionMenuId } ... on AudioTarget { audioId audioType createdAt duration id shareUrl title updatedAt url thumbnailMedia {...Image} } ... on ConsentTarget { trackers {...TargetTrackers} } ... on ContributionTarget { articleId } ... on FormSubmitTarget { groupId tagIds trackers {...TargetTrackers} } ... on InternalBlockTarget { blockId } ... on JWPlayerVideoTarget { shareUrl } ... on LoginTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on LogoutTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on PushSubscribeTarget { pushTag successMessage } ... on RemoteTarget { action permissions } ... on ScreenTarget { targetId url } ... on SetVariablesTarget { variables {...Variable} } ... on ShareTarget { shareText } ... on SlideshowTarget { id slideId } ... on UrlTarget { relation url } ... on VideoTarget { shareUrl } } fragment TargetTrackers on TargetTrackers { __typename activate {...TrackingEvent} } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment GTMTrackers on GTMTrackers { __typename click{ __typename action category contentId element isAlgorithmicItem itemId itemLabel itemUrl label list position teaserTitle teaserType } view{ __typename event data{ __typename key value } } } fragment LocalAction on LocalAction { __typename executeOnceId ... on LiveDataConnectionAction { actionHandler liveDataEventSource{ __typename ... on FirebaseRealTimeDataEventSource { connectionString itemId addTarget {...TargetInception} removeTarget {...TargetInception} updateTarget {...TargetInception} } } } }";
    const queryHash = "a8aa972bec4f1a003263c6f5e1006817cf3f5dd18041747f5c3b69f702297d15";
    const variables = {
      url
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "ScreenByUrl",
      variables
    };
    const opener = (envelop) => envelop.screenByUrl;
    return this.fetch(parameters, opener);
  }
  async slideshowById(id) {
    const queryString = "query SlideshowById ($id: ID!) { slideshowById (id: $id) { __typename slides {...SlideshowSlide} } } fragment SlideshowSlide on SlideshowSlide { __typename id ... on ImageSlideshowSlide { image {...Image} } } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment ColorTheme on ColorTheme { __typename id }";
    const queryHash = "bb04e0d70d4a423405e89efa1d82b1faccf50237760d54950c2f184164202f21";
    const variables = {
      id
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "SlideshowById",
      variables
    };
    const opener = (envelop) => envelop.slideshowById;
    return this.fetch(parameters, opener);
  }
  async handleAction(actionData, id) {
    const queryString = "mutation HandleAction ($actionData: ActionData!,$id: ID!) { handleAction (actionData: $actionData, id: $id) { __typename ... on BlockRemovalByGroupIdActionResponse { ...BlockRemovalByGroupIdActionResponse } ... on BlockReplacementActionResponse { ...BlockReplacementActionResponse } ... on BlockReplacementByIdActionResponse { ...BlockReplacementByIdActionResponse } ... on CompoundBlockModificationActionResponse { ...CompoundBlockModificationActionResponse } ... on ScreenReplacementActionResponse { ...ScreenReplacementActionResponse } ... on TargetActionResponse { ...TargetActionResponse } } } fragment TargetActionResponse on TargetActionResponse { __typename successState target {...TargetInception} } fragment Target on Target { __typename GTMTrackers {...GTMTrackers} ... on PushSubscribeTarget { pushTag successMessage } } fragment TargetInception on Target { ...Target ... on ActionMenuTarget { actionMenuId } ... on AudioTarget { audioId audioType createdAt duration id shareUrl title updatedAt url thumbnailMedia {...Image} } ... on ConsentTarget { trackers {...TargetTrackers} } ... on ContributionTarget { articleId } ... on FormSubmitTarget { groupId tagIds trackers {...TargetTrackers} } ... on InternalBlockTarget { blockId } ... on JWPlayerVideoTarget { shareUrl } ... on LoginTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on LogoutTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on PushSubscribeTarget { pushTag successMessage } ... on RemoteTarget { action permissions } ... on ScreenTarget { targetId url } ... on SetVariablesTarget { variables {...Variable} } ... on ShareTarget { shareText } ... on SlideshowTarget { id slideId } ... on UrlTarget { relation url } ... on VideoTarget { shareUrl } } fragment Variable on Variable { __typename name value } fragment TargetTrackers on TargetTrackers { __typename activate {...TrackingEvent} } fragment TrackingEvent on TrackingEvent { __typename trackOnceId timerSettings{ __typename minimalTimeThreshold startPolicy stopPolicy timerId timerLeavePolicy timerPolicy } ... on BFFEvent { data eventType } ... on CookieEvent { cookieMaxAge cookieName cookieOperation cookieValue } ... on CxenseEvent { appPlatform category loc shareUrl title } ... on DataLayerScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseTrackingEvent { eventName fields{ __typename key value } } ... on GoogleEvent { action alibi category label value customDimensions {...GoogleIndexedParam} customMetrics {...GoogleIndexedParam} customParams{ __typename key value } } ... on GooglePageviewEvent { alibi page } ... on HttpEvent { body method url headers{ __typename name value } } ... on NoboEvent { isFrontpage screen fields{ __typename key value } } ... on PipTrackingEvent { dpgCampaign dpgContent dpgMedium dpgSource dpgTerm } ... on ReadStateEvent { readStateId } ... on SacEvent { action category label value } ... on SacPageviewEvent { fields{ __typename key value } } ... on SetVariableEvent { variableName variableValue } ... on UsabillaEvent { action category label } } fragment GoogleIndexedParam on GoogleIndexedParam { __typename index value } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment ColorTheme on ColorTheme { __typename id } fragment GTMTrackers on GTMTrackers { __typename click{ __typename action category contentId element isAlgorithmicItem itemId itemLabel itemUrl label list position teaserTitle teaserType } view{ __typename event data{ __typename key value } } } fragment ScreenReplacementActionResponse on ScreenReplacementActionResponse { __typename screenPresentationStyle successState screen{ __typename commentsCount commentsEnabled id schemaOrgString screenCanonicalUrl sectionTheme title updatedAt actions{ __typename hide {...LocalAction} show {...LocalAction} } advertisementData{ __typename key value } firstBlockPage{ __typename blocks {...Block} sideLoadedBlocks {...Block} sidebarBlocks {...Block} topzoneBlocks {...Block} } grids{ __typename id narrowColumnCount wideColumnCount } httpResponse{ __typename redirectUrl statusCode } primaryColorTheme {...ColorTheme} screenMetadata{ __typename key value } screenOgData{ __typename key value } trackers{ __typename hide {...TrackingEvent} pullRefresh {...TrackingEvent} show {...TrackingEvent} } twitterCardData{ __typename key value } variables {...Variable} } } fragment Block on Block { __typename groupIds id displayRule{ __typename ... on VariableEqualsRule { variableName variableValue } ... on VariableNotEqualsRule { variableName variableValue } } ... on AudioBlock { embedUrl } ... on BannerBlock { showOnDesktop showOnMobile slotName } ... on ButtonBarBlock { buttonBarPresentationStyle buttonsPresentationStyle buttons{ __typename linkWidth backgroundColorTheme {...ColorTheme} target {...TargetInception} title {...StyledText} } } ... on CarouselLinkBlock { legacySlideshowName viewAspectRatio links {...Link} } ... on ClientSideTimelineBlock { timelineId } ... on CommentBlock { likes replies commentText {...StyledText} dateLabel {...StyledText} likesText {...StyledText} repliesText {...StyledText} respondText {...StyledText} target {...TargetInception} username {...StyledText} usernameLabel{ __typename text {...StyledText} } } ... on ContainerBlock { sideLoadedBlockIds webContainerFlavor{ __typename ... on ArticleMetaContainer { location } ... on ContentListContainer { header template theme GTMTrackers {...GTMTrackers} } ... on StyledWebContainer { cssClass tag attributes{ __typename key value } } } } ... on DetailBlock { summary updatedAt icon {...Image} title {...StyledText} } ... on EmbedBlock { blockFlavor{ __typename ... on InfographicEmbedBlockFlavor { copyright heightHint provider providerUrl url usePym themedUrl{ __typename dark light } } ... on TrackingPixelEmbedBlockFlavor { embedCode } ... on TrackingPixelFlavor { url } ... on TwitterEmbedBlockFlavor { align cards conversation tweetId width } ... on WebEmbedBlockFlavor { embedCode heightHint url } } } ... on ErrorBlock { errorIdentifier message } ... on FormElementBlock { groupId inputValue borderColorTheme {...ColorTheme} fieldLabel {...StyledText} formElementFlavor{ __typename ... on TextFieldFlavor { borderWidth cornerRadius maxlength placeholder borderColorTheme {...ColorTheme} placeholderText {...StyledText} } } target {...TargetInception} value {...StyledText} } ... on HeaderBlock { headerLevel theme subtitle {...StyledText} target {...TargetInception} title {...StyledText} titlePrefixIcon {...Image} titleSuffixIcon {...Image} } ... on ImageBlock { imageStyle image {...Image} imageFlavor{ __typename ... on ArticleHeadImageFlavor { label {...StyledText} title {...StyledText} } ... on FigureImageFlavor { caption {...StyledText} copyright {...StyledText} } ... on SizedImageFlavor { height width } } target {...TargetInception} title {...StyledText} } ... on LinkBlock { grid template type link {...Link} } ... on MenuItemBlock { active icon {...Image} target {...TargetInception} title {...StyledText} } ... on ScoreboardBlock { activeWidgets{ __typename widgetId widgetSetId } widgetSets{ __typename id icon {...Image} title {...StyledText} widgets{ __typename ... on GraceNoteWidget { id leagueId matchId season title {...StyledText} } } } } ... on SourceBlock { icon {...Image} target {...TargetInception} title {...StyledText} } ... on TextBlock { readStateId textRole styledText {...StyledText} textFlavor{ __typename ... on IconTextFlavor { linkAlignment prefixIcon {...Image} suffixIcon {...Image} } ... on LabelTextFlavor { backgroundColor {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on LabeledListItemTextFlavor { leftPadding label {...StyledText} } ... on ListItemTextFlavor { leftPadding bulletColorTheme {...ColorTheme} } ... on SponsoredByTextFlavor { brandIcon {...Image} } } } ... on VideoBlock { caption createdAt duration isLivestream mediaId previewImage {...Image} title {...StyledText} videoFlavor{ __typename ... on ArticleHeaderVideoFlavor { caption createdAt } } videoPlayerFlavor{ __typename ... on EmbedPlayerFlavor { embedCode url } ... on JWPlayerFlavor { adSectionName disableAds playlist } ... on YouTubePlayerFlavor { url } } } ... on WidgetBarBlock { label updatedAt widgetBarStyle widgetBarIcons{ __typename label image {...Image} target {...TargetInception} } } ... on WidgetLinkBlock { link {...Link} } } fragment Link on Link { __typename groupIds linkFlavor{ __typename ... on ButtonLinkFlavor { alignment borderWidth cornerRadius linkWidth backgroundColorTheme {...ColorTheme} borderColorTheme {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on CTALinkFlavor { cta {...StyledText} icon {...Image} title {...StyledText} } ... on CTAWithLargeTextLinkFlavor { body {...StyledText} cta {...StyledText} icon {...Image} } ... on ImageLinkFlavor { image {...Image} } ... on LargeArticleLinkFlavor { estimatedDuration publishedAt icon {...Image} image {...Image} label {...StyledText} labelSuffixIcon {...Image} } ... on MoreLinkFlavor { theme chevronColorTheme {...ColorTheme} } ... on RightIconButtonLinkFlavor { buttonIcon {...Image} icon {...Image} label {...StyledText} } ... on SmallArticleLinkFlavor { estimatedDuration isPartner publishedAt brandIcon {...Image} byline {...StyledText} icon {...Image} image {...Image} label {...StyledText} } ... on SubtitleLinkFlavor { prefixIcon {...Image} subtitle {...StyledText} suffixIcon {...Image} } ... on TextLinkFlavor { linkWidth prefixIcon {...Image} suffixIcon {...Image} } ... on TimelineLinkFlavor { estimatedDuration brandIcon {...Image} byline {...StyledText} colorTheme {...ColorTheme} icon {...Image} image {...Image} label {...StyledText} } ... on ToggleLinkFlavor { enabled icon {...Image} subTitle {...StyledText} } } target {...TargetInception} title {...StyledText} } fragment StyledText on StyledText { __typename text textType linkTargets{ __typename id url target {...TargetInception} } } fragment LocalAction on LocalAction { __typename executeOnceId ... on LiveDataConnectionAction { actionHandler liveDataEventSource{ __typename ... on FirebaseRealTimeDataEventSource { connectionString itemId addTarget {...TargetInception} removeTarget {...TargetInception} updateTarget {...TargetInception} } } } } fragment CompoundBlockModificationActionResponse on CompoundBlockModificationActionResponse { __typename successState modifications{ __typename ... on BlockRemovalByGroupIdActionResponse { ...BlockRemovalByGroupIdActionResponse } ... on BlockReplacementByIdActionResponse { ...BlockReplacementByIdActionResponse } } } fragment BlockReplacementByIdActionResponse on BlockReplacementByIdActionResponse { __typename blockId successState blocks {...Block} } fragment BlockRemovalByGroupIdActionResponse on BlockRemovalByGroupIdActionResponse { __typename groupIds successState } fragment BlockReplacementActionResponse on BlockReplacementActionResponse { __typename successState blocks {...Block} }";
    const queryHash = "281082ab97b8fa35101254b3a6958e28c410d351baa288a018585b60301a6639";
    const variables = {
      actionData,
      id
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "HandleAction",
      variables
    };
    const opener = (envelop) => envelop.handleAction;
    return this.fetch(parameters, opener);
  }
  async handleEvent(eventData, eventType) {
    const queryString = "mutation HandleEvent ($eventData: String!,$eventType: ID!) { handleEvent (eventData: $eventData, eventType: $eventType) { __typename handled } }";
    const queryHash = "5c737eec02b9176690bcd73ed5d076c7546c1c0364089056fb1579ee33edc663";
    const variables = {
      eventData,
      eventType
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "HandleEvent",
      variables
    };
    const opener = (envelop) => envelop.handleEvent;
    return this.fetch(parameters, opener);
  }
  async handleQuestionFormData(data, groupId, id, tagIds) {
    const queryString = "mutation HandleQuestionFormData ($data: [FormDataKeyValue],$groupId: ID!,$id: ID!,$tagIds: [Int]) { handleQuestionFormData (data: $data, groupId: $groupId, id: $id, tagIds: $tagIds) { __typename ... on BlockRemovalByGroupIdActionResponse { ...BlockRemovalByGroupIdActionResponse } ... on BlockReplacementActionResponse { ...BlockReplacementActionResponse } ... on BlockReplacementByIdActionResponse { ...BlockReplacementByIdActionResponse } ... on CompoundBlockModificationActionResponse { ...CompoundBlockModificationActionResponse } ... on ScreenReplacementActionResponse { ...ScreenReplacementActionResponse } ... on TargetActionResponse { ...TargetActionResponse } } } fragment TargetActionResponse on TargetActionResponse { __typename successState target {...TargetInception} } fragment Target on Target { __typename GTMTrackers {...GTMTrackers} ... on PushSubscribeTarget { pushTag successMessage } } fragment TargetInception on Target { ...Target ... on ActionMenuTarget { actionMenuId } ... on AudioTarget { audioId audioType createdAt duration id shareUrl title updatedAt url thumbnailMedia {...Image} } ... on ConsentTarget { trackers {...TargetTrackers} } ... on ContributionTarget { articleId } ... on FormSubmitTarget { groupId tagIds trackers {...TargetTrackers} } ... on InternalBlockTarget { blockId } ... on JWPlayerVideoTarget { shareUrl } ... on LoginTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on LogoutTarget { failureTrackers {...TrackingEvent} successTrackers {...TrackingEvent} trackers {...TargetTrackers} } ... on PushSubscribeTarget { pushTag successMessage } ... on RemoteTarget { action permissions } ... on ScreenTarget { targetId url } ... on SetVariablesTarget { variables {...Variable} } ... on ShareTarget { shareText } ... on SlideshowTarget { id slideId } ... on UrlTarget { relation url } ... on VideoTarget { shareUrl } } fragment Variable on Variable { __typename name value } fragment TargetTrackers on TargetTrackers { __typename activate {...TrackingEvent} } fragment TrackingEvent on TrackingEvent { __typename trackOnceId timerSettings{ __typename minimalTimeThreshold startPolicy stopPolicy timerId timerLeavePolicy timerPolicy } ... on BFFEvent { data eventType } ... on CookieEvent { cookieMaxAge cookieName cookieOperation cookieValue } ... on CxenseEvent { appPlatform category loc shareUrl title } ... on DataLayerScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseScreenViewEvent { eventName fields{ __typename key value } } ... on FirebaseTrackingEvent { eventName fields{ __typename key value } } ... on GoogleEvent { action alibi category label value customDimensions {...GoogleIndexedParam} customMetrics {...GoogleIndexedParam} customParams{ __typename key value } } ... on GooglePageviewEvent { alibi page } ... on HttpEvent { body method url headers{ __typename name value } } ... on NoboEvent { isFrontpage screen fields{ __typename key value } } ... on PipTrackingEvent { dpgCampaign dpgContent dpgMedium dpgSource dpgTerm } ... on ReadStateEvent { readStateId } ... on SacEvent { action category label value } ... on SacPageviewEvent { fields{ __typename key value } } ... on SetVariableEvent { variableName variableValue } ... on UsabillaEvent { action category label } } fragment GoogleIndexedParam on GoogleIndexedParam { __typename index value } fragment Image on Image { __typename copyright description id title url viewAspectRatio ... on GenericImage { mediaId } ... on Graphic { name tintColor {...ColorTheme} } ... on LottieAnimation { autoplay cornerRadius count loop repeatMode speed src backgroundColorTheme {...ColorTheme} } } fragment ColorTheme on ColorTheme { __typename id } fragment GTMTrackers on GTMTrackers { __typename click{ __typename action category contentId element isAlgorithmicItem itemId itemLabel itemUrl label list position teaserTitle teaserType } view{ __typename event data{ __typename key value } } } fragment ScreenReplacementActionResponse on ScreenReplacementActionResponse { __typename screenPresentationStyle successState screen{ __typename commentsCount commentsEnabled id schemaOrgString screenCanonicalUrl sectionTheme title updatedAt actions{ __typename hide {...LocalAction} show {...LocalAction} } advertisementData{ __typename key value } firstBlockPage{ __typename blocks {...Block} sideLoadedBlocks {...Block} sidebarBlocks {...Block} topzoneBlocks {...Block} } grids{ __typename id narrowColumnCount wideColumnCount } httpResponse{ __typename redirectUrl statusCode } primaryColorTheme {...ColorTheme} screenMetadata{ __typename key value } screenOgData{ __typename key value } trackers{ __typename hide {...TrackingEvent} pullRefresh {...TrackingEvent} show {...TrackingEvent} } twitterCardData{ __typename key value } variables {...Variable} } } fragment Block on Block { __typename groupIds id displayRule{ __typename ... on VariableEqualsRule { variableName variableValue } ... on VariableNotEqualsRule { variableName variableValue } } ... on AudioBlock { embedUrl } ... on BannerBlock { showOnDesktop showOnMobile slotName } ... on ButtonBarBlock { buttonBarPresentationStyle buttonsPresentationStyle buttons{ __typename linkWidth backgroundColorTheme {...ColorTheme} target {...TargetInception} title {...StyledText} } } ... on CarouselLinkBlock { legacySlideshowName viewAspectRatio links {...Link} } ... on ClientSideTimelineBlock { timelineId } ... on CommentBlock { likes replies commentText {...StyledText} dateLabel {...StyledText} likesText {...StyledText} repliesText {...StyledText} respondText {...StyledText} target {...TargetInception} username {...StyledText} usernameLabel{ __typename text {...StyledText} } } ... on ContainerBlock { sideLoadedBlockIds webContainerFlavor{ __typename ... on ArticleMetaContainer { location } ... on ContentListContainer { header template theme GTMTrackers {...GTMTrackers} } ... on StyledWebContainer { cssClass tag attributes{ __typename key value } } } } ... on DetailBlock { summary updatedAt icon {...Image} title {...StyledText} } ... on EmbedBlock { blockFlavor{ __typename ... on InfographicEmbedBlockFlavor { copyright heightHint provider providerUrl url usePym themedUrl{ __typename dark light } } ... on TrackingPixelEmbedBlockFlavor { embedCode } ... on TrackingPixelFlavor { url } ... on TwitterEmbedBlockFlavor { align cards conversation tweetId width } ... on WebEmbedBlockFlavor { embedCode heightHint url } } } ... on ErrorBlock { errorIdentifier message } ... on FormElementBlock { groupId inputValue borderColorTheme {...ColorTheme} fieldLabel {...StyledText} formElementFlavor{ __typename ... on TextFieldFlavor { borderWidth cornerRadius maxlength placeholder borderColorTheme {...ColorTheme} placeholderText {...StyledText} } } target {...TargetInception} value {...StyledText} } ... on HeaderBlock { headerLevel theme subtitle {...StyledText} target {...TargetInception} title {...StyledText} titlePrefixIcon {...Image} titleSuffixIcon {...Image} } ... on ImageBlock { imageStyle image {...Image} imageFlavor{ __typename ... on ArticleHeadImageFlavor { label {...StyledText} title {...StyledText} } ... on FigureImageFlavor { caption {...StyledText} copyright {...StyledText} } ... on SizedImageFlavor { height width } } target {...TargetInception} title {...StyledText} } ... on LinkBlock { grid template type link {...Link} } ... on MenuItemBlock { active icon {...Image} target {...TargetInception} title {...StyledText} } ... on ScoreboardBlock { activeWidgets{ __typename widgetId widgetSetId } widgetSets{ __typename id icon {...Image} title {...StyledText} widgets{ __typename ... on GraceNoteWidget { id leagueId matchId season title {...StyledText} } } } } ... on SourceBlock { icon {...Image} target {...TargetInception} title {...StyledText} } ... on TextBlock { readStateId textRole styledText {...StyledText} textFlavor{ __typename ... on IconTextFlavor { linkAlignment prefixIcon {...Image} suffixIcon {...Image} } ... on LabelTextFlavor { backgroundColor {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on LabeledListItemTextFlavor { leftPadding label {...StyledText} } ... on ListItemTextFlavor { leftPadding bulletColorTheme {...ColorTheme} } ... on SponsoredByTextFlavor { brandIcon {...Image} } } } ... on VideoBlock { caption createdAt duration isLivestream mediaId previewImage {...Image} title {...StyledText} videoFlavor{ __typename ... on ArticleHeaderVideoFlavor { caption createdAt } } videoPlayerFlavor{ __typename ... on EmbedPlayerFlavor { embedCode url } ... on JWPlayerFlavor { adSectionName disableAds playlist } ... on YouTubePlayerFlavor { url } } } ... on WidgetBarBlock { label updatedAt widgetBarStyle widgetBarIcons{ __typename label image {...Image} target {...TargetInception} } } ... on WidgetLinkBlock { link {...Link} } } fragment Link on Link { __typename groupIds linkFlavor{ __typename ... on ButtonLinkFlavor { alignment borderWidth cornerRadius linkWidth backgroundColorTheme {...ColorTheme} borderColorTheme {...ColorTheme} prefixIcon {...Image} suffixIcon {...Image} } ... on CTALinkFlavor { cta {...StyledText} icon {...Image} title {...StyledText} } ... on CTAWithLargeTextLinkFlavor { body {...StyledText} cta {...StyledText} icon {...Image} } ... on ImageLinkFlavor { image {...Image} } ... on LargeArticleLinkFlavor { estimatedDuration publishedAt icon {...Image} image {...Image} label {...StyledText} labelSuffixIcon {...Image} } ... on MoreLinkFlavor { theme chevronColorTheme {...ColorTheme} } ... on RightIconButtonLinkFlavor { buttonIcon {...Image} icon {...Image} label {...StyledText} } ... on SmallArticleLinkFlavor { estimatedDuration isPartner publishedAt brandIcon {...Image} byline {...StyledText} icon {...Image} image {...Image} label {...StyledText} } ... on SubtitleLinkFlavor { prefixIcon {...Image} subtitle {...StyledText} suffixIcon {...Image} } ... on TextLinkFlavor { linkWidth prefixIcon {...Image} suffixIcon {...Image} } ... on TimelineLinkFlavor { estimatedDuration brandIcon {...Image} byline {...StyledText} colorTheme {...ColorTheme} icon {...Image} image {...Image} label {...StyledText} } ... on ToggleLinkFlavor { enabled icon {...Image} subTitle {...StyledText} } } target {...TargetInception} title {...StyledText} } fragment StyledText on StyledText { __typename text textType linkTargets{ __typename id url target {...TargetInception} } } fragment LocalAction on LocalAction { __typename executeOnceId ... on LiveDataConnectionAction { actionHandler liveDataEventSource{ __typename ... on FirebaseRealTimeDataEventSource { connectionString itemId addTarget {...TargetInception} removeTarget {...TargetInception} updateTarget {...TargetInception} } } } } fragment CompoundBlockModificationActionResponse on CompoundBlockModificationActionResponse { __typename successState modifications{ __typename ... on BlockRemovalByGroupIdActionResponse { ...BlockRemovalByGroupIdActionResponse } ... on BlockReplacementByIdActionResponse { ...BlockReplacementByIdActionResponse } } } fragment BlockReplacementByIdActionResponse on BlockReplacementByIdActionResponse { __typename blockId successState blocks {...Block} } fragment BlockRemovalByGroupIdActionResponse on BlockRemovalByGroupIdActionResponse { __typename groupIds successState } fragment BlockReplacementActionResponse on BlockReplacementActionResponse { __typename successState blocks {...Block} }";
    const queryHash = "7063aded0df506d5d12915f78c985673158ded8928c6447452d89449f28de362";
    const variables = {
      data,
      groupId,
      id,
      tagIds
    };
    const parameters = {
      query: queryString,
      extensions: {
        persistedQuery: {
          sha256Hash: queryHash,
          version: 1
        }
      },
      operationName: "HandleQuestionFormData",
      variables
    };
    const opener = (envelop) => envelop.handleQuestionFormData;
    return this.fetch(parameters, opener);
  }
};

// src/enums/AppNexusBannerType.ts
var AppNexusBannerType;
(function(AppNexusBannerType2) {
  AppNexusBannerType2["Banner"] = "BANNER";
  AppNexusBannerType2["NativeSmarticle"] = "NATIVE_SMARTICLE";
})(AppNexusBannerType || (AppNexusBannerType = {}));

// src/enums/ArticleMetaLocation.ts
var ArticleMetaLocation;
(function(ArticleMetaLocation2) {
  ArticleMetaLocation2["End"] = "END";
  ArticleMetaLocation2["Top"] = "TOP";
})(ArticleMetaLocation || (ArticleMetaLocation = {}));

// src/enums/ButtonBarPresentationStyle.ts
var ButtonBarPresentationStyle;
(function(ButtonBarPresentationStyle2) {
  ButtonBarPresentationStyle2["StackVertical"] = "STACK_VERTICAL";
  ButtonBarPresentationStyle2["Tabs"] = "TABS";
})(ButtonBarPresentationStyle || (ButtonBarPresentationStyle = {}));

// src/enums/ButtonsPresentationStyle.ts
var ButtonsPresentationStyle;
(function(ButtonsPresentationStyle2) {
  ButtonsPresentationStyle2["Default"] = "DEFAULT";
  ButtonsPresentationStyle2["Tabs"] = "TABS";
})(ButtonsPresentationStyle || (ButtonsPresentationStyle = {}));

// src/enums/CarouselStyle.ts
var CarouselStyle;
(function(CarouselStyle2) {
  CarouselStyle2["Continuous"] = "CONTINUOUS";
  CarouselStyle2["Paginated"] = "PAGINATED";
  CarouselStyle2["Sections"] = "SECTIONS";
  CarouselStyle2["Stories"] = "STORIES";
})(CarouselStyle || (CarouselStyle = {}));

// src/enums/CookieEventOperation.ts
var CookieEventOperation;
(function(CookieEventOperation2) {
  CookieEventOperation2["DeleteCookie"] = "DELETE_COOKIE";
  CookieEventOperation2["SetCookie"] = "SET_COOKIE";
})(CookieEventOperation || (CookieEventOperation = {}));

// src/enums/CoreScreenName.ts
var CoreScreenName;
(function(CoreScreenName2) {
  CoreScreenName2["Frontpage"] = "FRONTPAGE";
  CoreScreenName2["Gasprices"] = "GASPRICES";
  CoreScreenName2["Traffic"] = "TRAFFIC";
  CoreScreenName2["Trains"] = "TRAINS";
})(CoreScreenName || (CoreScreenName = {}));

// src/enums/FontStyle.ts
var FontStyle;
(function(FontStyle2) {
  FontStyle2["Italic"] = "ITALIC";
  FontStyle2["Normal"] = "NORMAL";
})(FontStyle || (FontStyle = {}));

// src/enums/FontWeight.ts
var FontWeight;
(function(FontWeight2) {
  FontWeight2["Bold"] = "BOLD";
  FontWeight2["Light"] = "LIGHT";
  FontWeight2["Regular"] = "REGULAR";
})(FontWeight || (FontWeight = {}));

// src/enums/GroupPosition.ts
var GroupPosition;
(function(GroupPosition2) {
  GroupPosition2["End"] = "END";
  GroupPosition2["Middle"] = "MIDDLE";
  GroupPosition2["Single"] = "SINGLE";
  GroupPosition2["Start"] = "START";
})(GroupPosition || (GroupPosition = {}));

// src/enums/HeaderLevel.ts
var HeaderLevel;
(function(HeaderLevel2) {
  HeaderLevel2["H1"] = "H1";
  HeaderLevel2["H2"] = "H2";
  HeaderLevel2["H3"] = "H3";
  HeaderLevel2["H4"] = "H4";
  HeaderLevel2["H5"] = "H5";
  HeaderLevel2["H6"] = "H6";
})(HeaderLevel || (HeaderLevel = {}));

// src/enums/HeaderStyle.ts
var HeaderStyle;
(function(HeaderStyle2) {
  HeaderStyle2["CleanLarge"] = "CLEAN_LARGE";
  HeaderStyle2["Personalized"] = "PERSONALIZED";
  HeaderStyle2["Title"] = "TITLE";
})(HeaderStyle || (HeaderStyle = {}));

// src/enums/ImageStyle.ts
var ImageStyle;
(function(ImageStyle2) {
  ImageStyle2["Hero"] = "HERO";
  ImageStyle2["Inline"] = "INLINE";
  ImageStyle2["Plain"] = "PLAIN";
  ImageStyle2["Video"] = "VIDEO";
})(ImageStyle || (ImageStyle = {}));

// src/enums/LinkAlignment.ts
var LinkAlignment;
(function(LinkAlignment2) {
  LinkAlignment2["Center"] = "CENTER";
  LinkAlignment2["Left"] = "LEFT";
  LinkAlignment2["Right"] = "RIGHT";
  LinkAlignment2["Stretch"] = "STRETCH";
})(LinkAlignment || (LinkAlignment = {}));

// src/enums/LinkStyle.ts
var LinkStyle;
(function(LinkStyle2) {
  LinkStyle2["Large"] = "LARGE";
  LinkStyle2["More"] = "MORE";
  LinkStyle2["PrimaryButton"] = "PRIMARY_BUTTON";
  LinkStyle2["SecondaryButton"] = "SECONDARY_BUTTON";
  LinkStyle2["Small"] = "SMALL";
  LinkStyle2["TertiaryButton"] = "TERTIARY_BUTTON";
  LinkStyle2["TextOnly"] = "TEXT_ONLY";
  LinkStyle2["Timeline"] = "TIMELINE";
})(LinkStyle || (LinkStyle = {}));

// src/enums/LinkWidth.ts
var LinkWidth;
(function(LinkWidth2) {
  LinkWidth2["FitContent"] = "FIT_CONTENT";
  LinkWidth2["Stretch"] = "STRETCH";
})(LinkWidth || (LinkWidth = {}));

// src/enums/LiveDataConnectionHandler.ts
var LiveDataConnectionHandler;
(function(LiveDataConnectionHandler2) {
  LiveDataConnectionHandler2["Close"] = "CLOSE";
  LiveDataConnectionHandler2["Open"] = "OPEN";
})(LiveDataConnectionHandler || (LiveDataConnectionHandler = {}));

// src/enums/LottieRepeatMode.ts
var LottieRepeatMode;
(function(LottieRepeatMode2) {
  LottieRepeatMode2["Bounce"] = "BOUNCE";
  LottieRepeatMode2["Normal"] = "NORMAL";
})(LottieRepeatMode || (LottieRepeatMode = {}));

// src/enums/NavigationButtonState.ts
var NavigationButtonState;
(function(NavigationButtonState2) {
  NavigationButtonState2["Deselected"] = "DESELECTED";
  NavigationButtonState2["Selected"] = "SELECTED";
})(NavigationButtonState || (NavigationButtonState = {}));

// src/enums/PresentationStyle.ts
var PresentationStyle;
(function(PresentationStyle2) {
  PresentationStyle2["External"] = "EXTERNAL";
})(PresentationStyle || (PresentationStyle = {}));

// src/enums/ScreenBackgroundImageFillStyle.ts
var ScreenBackgroundImageFillStyle;
(function(ScreenBackgroundImageFillStyle2) {
  ScreenBackgroundImageFillStyle2["AspectFill"] = "ASPECT_FILL";
  ScreenBackgroundImageFillStyle2["Repeat"] = "REPEAT";
  ScreenBackgroundImageFillStyle2["Stretch"] = "STRETCH";
})(ScreenBackgroundImageFillStyle || (ScreenBackgroundImageFillStyle = {}));

// src/enums/ScreenBehavior.ts
var ScreenBehavior;
(function(ScreenBehavior2) {
  ScreenBehavior2["Slides"] = "SLIDES";
  ScreenBehavior2["VerticalScrolling"] = "VERTICAL_SCROLLING";
})(ScreenBehavior || (ScreenBehavior = {}));

// src/enums/ScreenBreakPoint.ts
var ScreenBreakPoint;
(function(ScreenBreakPoint2) {
  ScreenBreakPoint2["L"] = "L";
  ScreenBreakPoint2["M"] = "M";
  ScreenBreakPoint2["S"] = "S";
})(ScreenBreakPoint || (ScreenBreakPoint = {}));

// src/enums/ScreenEntryPoint.ts
var ScreenEntryPoint;
(function(ScreenEntryPoint2) {
  ScreenEntryPoint2["Frontpage"] = "FRONTPAGE";
  ScreenEntryPoint2["Gasprices"] = "GASPRICES";
  ScreenEntryPoint2["MeestBesproken"] = "MEEST_BESPROKEN";
  ScreenEntryPoint2["MeestGelezen"] = "MEEST_GELEZEN";
  ScreenEntryPoint2["NetBinnen"] = "NET_BINNEN";
  ScreenEntryPoint2["NotificationSettings"] = "NOTIFICATION_SETTINGS";
  ScreenEntryPoint2["NuJij"] = "NU_JIJ";
  ScreenEntryPoint2["OverviewSettings"] = "OVERVIEW_SETTINGS";
  ScreenEntryPoint2["Search"] = "SEARCH";
  ScreenEntryPoint2["SectionMenu"] = "SECTION_MENU";
  ScreenEntryPoint2["SoccerNotificationSettings"] = "SOCCER_NOTIFICATION_SETTINGS";
  ScreenEntryPoint2["Traffic"] = "TRAFFIC";
  ScreenEntryPoint2["Trains"] = "TRAINS";
  ScreenEntryPoint2["Weather"] = "WEATHER";
})(ScreenEntryPoint || (ScreenEntryPoint = {}));

// src/enums/ScreenPresentationStyle.ts
var ScreenPresentationStyle;
(function(ScreenPresentationStyle2) {
  ScreenPresentationStyle2["ReplaceCurrent"] = "REPLACE_CURRENT";
  ScreenPresentationStyle2["UpdateCurrent"] = "UPDATE_CURRENT";
})(ScreenPresentationStyle || (ScreenPresentationStyle = {}));

// src/enums/SectionType.ts
var SectionType;
(function(SectionType2) {
  SectionType2["Achterklap"] = "ACHTERKLAP";
  SectionType2["Economie"] = "ECONOMIE";
  SectionType2["Geldzaken"] = "GELDZAKEN";
  SectionType2["MediaEnCultuur"] = "MEDIA_EN_CULTUUR";
  SectionType2["Nunl"] = "NUNL";
  SectionType2["Overig"] = "OVERIG";
  SectionType2["Sport"] = "SPORT";
  SectionType2["Tech"] = "TECH";
  SectionType2["Uit"] = "UIT";
  SectionType2["Werk"] = "WERK";
})(SectionType || (SectionType = {}));

// src/enums/SuccessState.ts
var SuccessState;
(function(SuccessState2) {
  SuccessState2["Failure"] = "FAILURE";
  SuccessState2["Success"] = "SUCCESS";
})(SuccessState || (SuccessState = {}));

// src/enums/TargetPermission.ts
var TargetPermission;
(function(TargetPermission2) {
  TargetPermission2["Notification"] = "NOTIFICATION";
})(TargetPermission || (TargetPermission = {}));

// src/enums/TargetType.ts
var TargetType;
(function(TargetType2) {
  TargetType2["Article"] = "ARTICLE";
  TargetType2["Audio"] = "AUDIO";
  TargetType2["Livematches"] = "LIVEMATCHES";
  TargetType2["Netbinnen"] = "NETBINNEN";
  TargetType2["Search"] = "SEARCH";
  TargetType2["Section"] = "SECTION";
  TargetType2["Sectionoverview"] = "SECTIONOVERVIEW";
  TargetType2["Slideshow"] = "SLIDESHOW";
  TargetType2["Timeline"] = "TIMELINE";
  TargetType2["Video"] = "VIDEO";
  TargetType2["Weather"] = "WEATHER";
})(TargetType || (TargetType = {}));

// src/enums/TextAlignment.ts
var TextAlignment;
(function(TextAlignment2) {
  TextAlignment2["Centered"] = "CENTERED";
  TextAlignment2["Left"] = "LEFT";
  TextAlignment2["Right"] = "RIGHT";
})(TextAlignment || (TextAlignment = {}));

// src/enums/TextRole.ts
var TextRole;
(function(TextRole2) {
  TextRole2["ArticleAuthor"] = "ARTICLE_AUTHOR";
  TextRole2["ArticleBody"] = "ARTICLE_BODY";
  TextRole2["ArticleDatetime"] = "ARTICLE_DATETIME";
  TextRole2["ArticleExcerpt"] = "ARTICLE_EXCERPT";
  TextRole2["ArticleHeader"] = "ARTICLE_HEADER";
  TextRole2["ArticleImageCopyright"] = "ARTICLE_IMAGE_COPYRIGHT";
  TextRole2["ArticleImageTitle"] = "ARTICLE_IMAGE_TITLE";
  TextRole2["ArticleQuoteAuthor"] = "ARTICLE_QUOTE_AUTHOR";
  TextRole2["ArticleQuoteBody"] = "ARTICLE_QUOTE_BODY";
  TextRole2["ArticleSubheader"] = "ARTICLE_SUBHEADER";
  TextRole2["ArticleSummaryItem"] = "ARTICLE_SUMMARY_ITEM";
  TextRole2["ArticleSummaryTitle"] = "ARTICLE_SUMMARY_TITLE";
  TextRole2["ArticleTagTitle"] = "ARTICLE_TAG_TITLE";
  TextRole2["LiveblogHeader"] = "LIVEBLOG_HEADER";
  TextRole2["LiveblogLastseen"] = "LIVEBLOG_LASTSEEN";
  TextRole2["LiveblogTimestamp"] = "LIVEBLOG_TIMESTAMP";
  TextRole2["LiveblogTimestampNew"] = "LIVEBLOG_TIMESTAMP_NEW";
})(TextRole || (TextRole = {}));

// src/enums/TextType.ts
var TextType;
(function(TextType2) {
  TextType2["Plain"] = "PLAIN";
  TextType2["RestrictedHtml"] = "RESTRICTED_HTML";
})(TextType || (TextType = {}));

// src/enums/TimerLeavePolicy.ts
var TimerLeavePolicy;
(function(TimerLeavePolicy2) {
  TimerLeavePolicy2["CancelOnLeaveApp"] = "CANCEL_ON_LEAVE_APP";
  TimerLeavePolicy2["CancelOnLeaveScreen"] = "CANCEL_ON_LEAVE_SCREEN";
  TimerLeavePolicy2["StopOnLeaveApp"] = "STOP_ON_LEAVE_APP";
  TimerLeavePolicy2["StopOnLeaveScreen"] = "STOP_ON_LEAVE_SCREEN";
})(TimerLeavePolicy || (TimerLeavePolicy = {}));

// src/enums/TimerPolicy.ts
var TimerPolicy;
(function(TimerPolicy2) {
  TimerPolicy2["Ignore"] = "IGNORE";
  TimerPolicy2["Reset"] = "RESET";
  TimerPolicy2["Stop"] = "STOP";
})(TimerPolicy || (TimerPolicy = {}));

// src/enums/TimerStartPolicy.ts
var TimerStartPolicy;
(function(TimerStartPolicy2) {
  TimerStartPolicy2["Ignore"] = "IGNORE";
  TimerStartPolicy2["Reset"] = "RESET";
  TimerStartPolicy2["StopStart"] = "STOP_START";
})(TimerStartPolicy || (TimerStartPolicy = {}));

// src/enums/TimerStopPolicy.ts
var TimerStopPolicy;
(function(TimerStopPolicy2) {
  TimerStopPolicy2["CancelOnLeaveApp"] = "CANCEL_ON_LEAVE_APP";
  TimerStopPolicy2["CancelOnLeaveScreen"] = "CANCEL_ON_LEAVE_SCREEN";
  TimerStopPolicy2["StopOnLeaveApp"] = "STOP_ON_LEAVE_APP";
  TimerStopPolicy2["StopOnLeaveScreen"] = "STOP_ON_LEAVE_SCREEN";
})(TimerStopPolicy || (TimerStopPolicy = {}));

// src/enums/TwitterAlign.ts
var TwitterAlign;
(function(TwitterAlign2) {
  TwitterAlign2["Center"] = "center";
  TwitterAlign2["Left"] = "left";
  TwitterAlign2["Right"] = "right";
})(TwitterAlign || (TwitterAlign = {}));

// src/enums/TwitterCards.ts
var TwitterCards;
(function(TwitterCards2) {
  TwitterCards2["Hidden"] = "hidden";
  TwitterCards2["Visible"] = "visible";
})(TwitterCards || (TwitterCards = {}));

// src/enums/TwitterConversation.ts
var TwitterConversation;
(function(TwitterConversation2) {
  TwitterConversation2["None"] = "none";
  TwitterConversation2["Show"] = "show";
})(TwitterConversation || (TwitterConversation = {}));

// src/enums/UrlRelation.ts
var UrlRelation;
(function(UrlRelation2) {
  UrlRelation2["Nofollow"] = "NOFOLLOW";
  UrlRelation2["Noopener"] = "NOOPENER";
  UrlRelation2["Noreferrer"] = "NOREFERRER";
})(UrlRelation || (UrlRelation = {}));

// src/enums/VerticalAlignment.ts
var VerticalAlignment;
(function(VerticalAlignment2) {
  VerticalAlignment2["Bottom"] = "BOTTOM";
  VerticalAlignment2["Middle"] = "MIDDLE";
  VerticalAlignment2["Top"] = "TOP";
})(VerticalAlignment || (VerticalAlignment = {}));

// src/enums/VideoTargetType.ts
var VideoTargetType;
(function(VideoTargetType2) {
  VideoTargetType2["Embed"] = "EMBED";
  VideoTargetType2["Jw"] = "JW";
  VideoTargetType2["Youtube"] = "YOUTUBE";
})(VideoTargetType || (VideoTargetType = {}));

// src/enums/WidgetBarStyle.ts
var WidgetBarStyle;
(function(WidgetBarStyle2) {
  WidgetBarStyle2["OnlyWidgets"] = "ONLY_WIDGETS";
  WidgetBarStyle2["PrefixLabel"] = "PREFIX_LABEL";
})(WidgetBarStyle || (WidgetBarStyle = {}));

// src/objects/ActionMenu.ts
var isActionMenu = (obj) => (obj == null ? void 0 : obj.__typename) === "ActionMenu";

// src/objects/ActionMenuItem.ts
var isActionMenuItem = (obj) => (obj == null ? void 0 : obj.__typename) === "ActionMenuItem";

// src/objects/ActionMenuTarget.ts
var isActionMenuTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "ActionMenuTarget";

// src/objects/AdvertisementDataKeyValue.ts
var isAdvertisementDataKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "AdvertisementDataKeyValue";

// src/objects/AppNexusBannerSize.ts
var isAppNexusBannerSize = (obj) => (obj == null ? void 0 : obj.__typename) === "AppNexusBannerSize";

// src/objects/AppNexusKeyword.ts
var isAppNexusKeyword = (obj) => (obj == null ? void 0 : obj.__typename) === "AppNexusKeyword";

// src/objects/ArticleHeadImageFlavor.ts
var isArticleHeadImageFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "ArticleHeadImageFlavor";

// src/objects/ArticleHeaderVideoFlavor.ts
var isArticleHeaderVideoFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "ArticleHeaderVideoFlavor";

// src/objects/ArticleMetaContainer.ts
var isArticleMetaContainer = (obj) => (obj == null ? void 0 : obj.__typename) === "ArticleMetaContainer";

// src/objects/ArticleScreenFlavor.ts
var isArticleScreenFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "ArticleScreenFlavor";

// src/blocks/AudioBlock.ts
var isAudioBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "AudioBlock";

// src/objects/AudioTarget.ts
var isAudioTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "AudioTarget";

// src/objects/BFFEvent.ts
var isBFFEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "BFFEvent";

// src/blocks/BannerBlock.ts
var isBannerBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "BannerBlock";

// src/objects/BarButton.ts
var isBarButton = (obj) => (obj == null ? void 0 : obj.__typename) === "BarButton";

// src/objects/BlankEvent.ts
var isBlankEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "BlankEvent";

// src/objects/BlockPage.ts
var isBlockPage = (obj) => (obj == null ? void 0 : obj.__typename) === "BlockPage";

// src/objects/BlockRemovalByGroupIdActionResponse.ts
var isBlockRemovalByGroupIdActionResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "BlockRemovalByGroupIdActionResponse";

// src/objects/BlockReplacementActionResponse.ts
var isBlockReplacementActionResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "BlockReplacementActionResponse";

// src/objects/BlockReplacementByIdActionResponse.ts
var isBlockReplacementByIdActionResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "BlockReplacementByIdActionResponse";

// src/objects/BlockTrackers.ts
var isBlockTrackers = (obj) => (obj == null ? void 0 : obj.__typename) === "BlockTrackers";

// src/blocks/ButtonBarBlock.ts
var isButtonBarBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "ButtonBarBlock";

// src/objects/ButtonLinkFlavor.ts
var isButtonLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "ButtonLinkFlavor";

// src/objects/CTALinkFlavor.ts
var isCTALinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "CTALinkFlavor";

// src/objects/CTAWithLargeTextLinkFlavor.ts
var isCTAWithLargeTextLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "CTAWithLargeTextLinkFlavor";

// src/blocks/CarouselLinkBlock.ts
var isCarouselLinkBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "CarouselLinkBlock";

// src/blocks/ClientSideTimelineBlock.ts
var isClientSideTimelineBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "ClientSideTimelineBlock";

// src/objects/ColorTheme.ts
var isColorTheme = (obj) => (obj == null ? void 0 : obj.__typename) === "ColorTheme";

// src/blocks/CommentBlock.ts
var isCommentBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "CommentBlock";

// src/objects/CommentUsernameLabel.ts
var isCommentUsernameLabel = (obj) => (obj == null ? void 0 : obj.__typename) === "CommentUsernameLabel";

// src/objects/CompoundBlockModificationActionResponse.ts
var isCompoundBlockModificationActionResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "CompoundBlockModificationActionResponse";

// src/objects/ConsentTarget.ts
var isConsentTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "ConsentTarget";

// src/blocks/ContainerBlock.ts
var isContainerBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "ContainerBlock";

// src/objects/ContentListContainer.ts
var isContentListContainer = (obj) => (obj == null ? void 0 : obj.__typename) === "ContentListContainer";

// src/objects/ContentPartner.ts
var isContentPartner = (obj) => (obj == null ? void 0 : obj.__typename) === "ContentPartner";

// src/objects/ContributionTarget.ts
var isContributionTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "ContributionTarget";

// src/objects/CookieEvent.ts
var isCookieEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "CookieEvent";

// src/objects/CxenseEvent.ts
var isCxenseEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "CxenseEvent";

// src/objects/DataLayerScreenViewEvent.ts
var isDataLayerScreenViewEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "DataLayerScreenViewEvent";

// src/objects/DataLayerScreenViewKeyValue.ts
var isDataLayerScreenViewKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "DataLayerScreenViewKeyValue";

// src/blocks/DetailBlock.ts
var isDetailBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "DetailBlock";

// src/objects/DismissTarget.ts
var isDismissTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "DismissTarget";

// src/blocks/DividerBlock.ts
var isDividerBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "DividerBlock";

// src/blocks/EmbedBlock.ts
var isEmbedBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "EmbedBlock";

// src/objects/EmbedPlayerFlavor.ts
var isEmbedPlayerFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "EmbedPlayerFlavor";

// src/blocks/ErrorBlock.ts
var isErrorBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "ErrorBlock";

// src/objects/EventResponse.ts
var isEventResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "EventResponse";

// src/objects/FigureImageFlavor.ts
var isFigureImageFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "FigureImageFlavor";

// src/objects/FirebaseRealTimeDataEventSource.ts
var isFirebaseRealTimeDataEventSource = (obj) => (obj == null ? void 0 : obj.__typename) === "FirebaseRealTimeDataEventSource";

// src/objects/FirebaseScreenViewEvent.ts
var isFirebaseScreenViewEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "FirebaseScreenViewEvent";

// src/objects/FirebaseScreenViewKeyValue.ts
var isFirebaseScreenViewKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "FirebaseScreenViewKeyValue";

// src/objects/FirebaseTrackingEvent.ts
var isFirebaseTrackingEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "FirebaseTrackingEvent";

// src/objects/FirebaseTrackingKeyValue.ts
var isFirebaseTrackingKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "FirebaseTrackingKeyValue";

// src/objects/FontInfo.ts
var isFontInfo = (obj) => (obj == null ? void 0 : obj.__typename) === "FontInfo";

// src/blocks/FormElementBlock.ts
var isFormElementBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "FormElementBlock";

// src/objects/FormSubmitTarget.ts
var isFormSubmitTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "FormSubmitTarget";

// src/objects/GTMDataKeyValue.ts
var isGTMDataKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "GTMDataKeyValue";

// src/objects/GTMEvent.ts
var isGTMEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "GTMEvent";

// src/objects/GTMLinkAttributes.ts
var isGTMLinkAttributes = (obj) => (obj == null ? void 0 : obj.__typename) === "GTMLinkAttributes";

// src/objects/GTMTrackers.ts
var isGTMTrackers = (obj) => (obj == null ? void 0 : obj.__typename) === "GTMTrackers";

// src/objects/GenericImage.ts
var isGenericImage = (obj) => (obj == null ? void 0 : obj.__typename) === "GenericImage";

// src/objects/GoogleEvent.ts
var isGoogleEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "GoogleEvent";

// src/objects/GoogleIndexedParam.ts
var isGoogleIndexedParam = (obj) => (obj == null ? void 0 : obj.__typename) === "GoogleIndexedParam";

// src/objects/GoogleKeyValue.ts
var isGoogleKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "GoogleKeyValue";

// src/objects/GooglePageviewEvent.ts
var isGooglePageviewEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "GooglePageviewEvent";

// src/objects/GraceNoteWidget.ts
var isGraceNoteWidget = (obj) => (obj == null ? void 0 : obj.__typename) === "GraceNoteWidget";

// src/objects/Graphic.ts
var isGraphic = (obj) => (obj == null ? void 0 : obj.__typename) === "Graphic";

// src/objects/Grid.ts
var isGrid = (obj) => (obj == null ? void 0 : obj.__typename) === "Grid";

// src/blocks/HeaderBlock.ts
var isHeaderBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "HeaderBlock";

// src/objects/HeaderButton.ts
var isHeaderButton = (obj) => (obj == null ? void 0 : obj.__typename) === "HeaderButton";

// src/objects/HttpEvent.ts
var isHttpEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "HttpEvent";

// src/objects/HttpHeader.ts
var isHttpHeader = (obj) => (obj == null ? void 0 : obj.__typename) === "HttpHeader";

// src/objects/HyperLinkTarget.ts
var isHyperLinkTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "HyperLinkTarget";

// src/objects/IconTextFlavor.ts
var isIconTextFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "IconTextFlavor";

// src/blocks/ImageBlock.ts
var isImageBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "ImageBlock";

// src/objects/ImageLinkFlavor.ts
var isImageLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "ImageLinkFlavor";

// src/objects/ImageSlideshowSlide.ts
var isImageSlideshowSlide = (obj) => (obj == null ? void 0 : obj.__typename) === "ImageSlideshowSlide";

// src/objects/InfographicEmbedBlockFlavor.ts
var isInfographicEmbedBlockFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "InfographicEmbedBlockFlavor";

// src/objects/InternalBlockTarget.ts
var isInternalBlockTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "InternalBlockTarget";

// src/objects/JWPlayerFlavor.ts
var isJWPlayerFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "JWPlayerFlavor";

// src/objects/JWPlayerVideoTarget.ts
var isJWPlayerVideoTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "JWPlayerVideoTarget";

// src/objects/LabelTextFlavor.ts
var isLabelTextFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "LabelTextFlavor";

// src/objects/LabeledListItemTextFlavor.ts
var isLabeledListItemTextFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "LabeledListItemTextFlavor";

// src/objects/LargeArticleLinkFlavor.ts
var isLargeArticleLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "LargeArticleLinkFlavor";

// src/objects/LegacyTimelineAdZone.ts
var isLegacyTimelineAdZone = (obj) => (obj == null ? void 0 : obj.__typename) === "LegacyTimelineAdZone";

// src/objects/LegacyTimelineInfo.ts
var isLegacyTimelineInfo = (obj) => (obj == null ? void 0 : obj.__typename) === "LegacyTimelineInfo";

// src/objects/Link.ts
var isLink = (obj) => (obj == null ? void 0 : obj.__typename) === "Link";

// src/blocks/LinkBlock.ts
var isLinkBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "LinkBlock";

// src/objects/ListItemTextFlavor.ts
var isListItemTextFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "ListItemTextFlavor";

// src/objects/LiveDataConnectionAction.ts
var isLiveDataConnectionAction = (obj) => (obj == null ? void 0 : obj.__typename) === "LiveDataConnectionAction";

// src/objects/LoginTarget.ts
var isLoginTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "LoginTarget";

// src/objects/LogoutTarget.ts
var isLogoutTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "LogoutTarget";

// src/objects/LottieAnimation.ts
var isLottieAnimation = (obj) => (obj == null ? void 0 : obj.__typename) === "LottieAnimation";

// src/objects/MenuItem.ts
var isMenuItem = (obj) => (obj == null ? void 0 : obj.__typename) === "MenuItem";

// src/blocks/MenuItemBlock.ts
var isMenuItemBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "MenuItemBlock";

// src/objects/Menus.ts
var isMenus = (obj) => (obj == null ? void 0 : obj.__typename) === "Menus";

// src/objects/MoreLinkFlavor.ts
var isMoreLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "MoreLinkFlavor";

// src/objects/NoboEvent.ts
var isNoboEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "NoboEvent";

// src/objects/NoboKeyValue.ts
var isNoboKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "NoboKeyValue";

// src/objects/OnboardingImage.ts
var isOnboardingImage = (obj) => (obj == null ? void 0 : obj.__typename) === "OnboardingImage";

// src/objects/OnboardingScreen.ts
var isOnboardingScreen = (obj) => (obj == null ? void 0 : obj.__typename) === "OnboardingScreen";

// src/objects/OnboardingScreenFlavor.ts
var isOnboardingScreenFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "OnboardingScreenFlavor";

// src/objects/OnboardingSheet.ts
var isOnboardingSheet = (obj) => (obj == null ? void 0 : obj.__typename) === "OnboardingSheet";

// src/objects/PipTrackingEvent.ts
var isPipTrackingEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "PipTrackingEvent";

// src/blocks/PlaceholderBlock.ts
var isPlaceholderBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "PlaceholderBlock";

// src/objects/PushNotificationTrackers.ts
var isPushNotificationTrackers = (obj) => (obj == null ? void 0 : obj.__typename) === "PushNotificationTrackers";

// src/objects/PushSubscribeTarget.ts
var isPushSubscribeTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "PushSubscribeTarget";

// src/objects/Query.ts
var isQuery = (obj) => (obj == null ? void 0 : obj.__typename) === "Query";

// src/objects/ReadStateEvent.ts
var isReadStateEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "ReadStateEvent";

// src/blocks/RecommendedArticles.ts
var isRecommendedArticles = (obj) => (obj == null ? void 0 : obj.__typename) === "RecommendedArticles";

// src/objects/RemoteTarget.ts
var isRemoteTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "RemoteTarget";

// src/objects/RightIconButtonLinkFlavor.ts
var isRightIconButtonLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "RightIconButtonLinkFlavor";

// src/objects/SacEvent.ts
var isSacEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "SacEvent";

// src/objects/SacPageviewEvent.ts
var isSacPageviewEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "SacPageviewEvent";

// src/objects/SacPageviewKeyValue.ts
var isSacPageviewKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "SacPageviewKeyValue";

// src/blocks/ScoreboardBlock.ts
var isScoreboardBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "ScoreboardBlock";

// src/objects/ScoreboardBlockActive.ts
var isScoreboardBlockActive = (obj) => (obj == null ? void 0 : obj.__typename) === "ScoreboardBlockActive";

// src/objects/ScoreboardWidgetSet.ts
var isScoreboardWidgetSet = (obj) => (obj == null ? void 0 : obj.__typename) === "ScoreboardWidgetSet";

// src/objects/Screen.ts
var isScreen = (obj) => (obj == null ? void 0 : obj.__typename) === "Screen";

// src/objects/ScreenActions.ts
var isScreenActions = (obj) => (obj == null ? void 0 : obj.__typename) === "ScreenActions";

// src/objects/ScreenBackgroundImage.ts
var isScreenBackgroundImage = (obj) => (obj == null ? void 0 : obj.__typename) === "ScreenBackgroundImage";

// src/objects/ScreenMetadataKeyValue.ts
var isScreenMetadataKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "ScreenMetadataKeyValue";

// src/objects/ScreenOgDataKeyValue.ts
var isScreenOgDataKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "ScreenOgDataKeyValue";

// src/objects/ScreenReplacementActionResponse.ts
var isScreenReplacementActionResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "ScreenReplacementActionResponse";

// src/objects/ScreenTarget.ts
var isScreenTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "ScreenTarget";

// src/objects/ScreenTrackers.ts
var isScreenTrackers = (obj) => (obj == null ? void 0 : obj.__typename) === "ScreenTrackers";

// src/objects/SearchScreenFlavor.ts
var isSearchScreenFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "SearchScreenFlavor";

// src/objects/SetVariableEvent.ts
var isSetVariableEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "SetVariableEvent";

// src/objects/SetVariablesTarget.ts
var isSetVariablesTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "SetVariablesTarget";

// src/objects/ShareTarget.ts
var isShareTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "ShareTarget";

// src/objects/SizedImageFlavor.ts
var isSizedImageFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "SizedImageFlavor";

// src/objects/Slideshow.ts
var isSlideshow = (obj) => (obj == null ? void 0 : obj.__typename) === "Slideshow";

// src/objects/SlideshowTarget.ts
var isSlideshowTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "SlideshowTarget";

// src/objects/SmallArticleLinkFlavor.ts
var isSmallArticleLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "SmallArticleLinkFlavor";

// src/blocks/SourceBlock.ts
var isSourceBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "SourceBlock";

// src/objects/SponsoredByTextFlavor.ts
var isSponsoredByTextFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "SponsoredByTextFlavor";

// src/objects/StyledText.ts
var isStyledText = (obj) => (obj == null ? void 0 : obj.__typename) === "StyledText";

// src/objects/StyledWebContainer.ts
var isStyledWebContainer = (obj) => (obj == null ? void 0 : obj.__typename) === "StyledWebContainer";

// src/objects/StyledWebContainerAttribute.ts
var isStyledWebContainerAttribute = (obj) => (obj == null ? void 0 : obj.__typename) === "StyledWebContainerAttribute";

// src/objects/SubMenuItem.ts
var isSubMenuItem = (obj) => (obj == null ? void 0 : obj.__typename) === "SubMenuItem";

// src/objects/SubtitleLinkFlavor.ts
var isSubtitleLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "SubtitleLinkFlavor";

// src/objects/TargetActionResponse.ts
var isTargetActionResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "TargetActionResponse";

// src/objects/TargetTrackers.ts
var isTargetTrackers = (obj) => (obj == null ? void 0 : obj.__typename) === "TargetTrackers";

// src/blocks/TextBlock.ts
var isTextBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "TextBlock";

// src/objects/TextFieldFlavor.ts
var isTextFieldFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "TextFieldFlavor";

// src/objects/TextLinkFlavor.ts
var isTextLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "TextLinkFlavor";

// src/objects/ThemedUrl.ts
var isThemedUrl = (obj) => (obj == null ? void 0 : obj.__typename) === "ThemedUrl";

// src/objects/TimelineLinkFlavor.ts
var isTimelineLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "TimelineLinkFlavor";

// src/objects/TimeoutAction.ts
var isTimeoutAction = (obj) => (obj == null ? void 0 : obj.__typename) === "TimeoutAction";

// src/objects/TimerSettings.ts
var isTimerSettings = (obj) => (obj == null ? void 0 : obj.__typename) === "TimerSettings";

// src/objects/ToggleLinkFlavor.ts
var isToggleLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "ToggleLinkFlavor";

// src/objects/TrackingPixelEmbedBlockFlavor.ts
var isTrackingPixelEmbedBlockFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "TrackingPixelEmbedBlockFlavor";

// src/objects/TrackingPixelFlavor.ts
var isTrackingPixelFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "TrackingPixelFlavor";

// src/objects/TwitterCardDataKeyValue.ts
var isTwitterCardDataKeyValue = (obj) => (obj == null ? void 0 : obj.__typename) === "TwitterCardDataKeyValue";

// src/objects/TwitterEmbedBlockFlavor.ts
var isTwitterEmbedBlockFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "TwitterEmbedBlockFlavor";

// src/objects/UrlTarget.ts
var isUrlTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "UrlTarget";

// src/objects/UsabillaEvent.ts
var isUsabillaEvent = (obj) => (obj == null ? void 0 : obj.__typename) === "UsabillaEvent";

// src/objects/Variable.ts
var isVariable = (obj) => (obj == null ? void 0 : obj.__typename) === "Variable";

// src/objects/VariableEqualsRule.ts
var isVariableEqualsRule = (obj) => (obj == null ? void 0 : obj.__typename) === "VariableEqualsRule";

// src/objects/VariableNotEqualsRule.ts
var isVariableNotEqualsRule = (obj) => (obj == null ? void 0 : obj.__typename) === "VariableNotEqualsRule";

// src/blocks/VideoBlock.ts
var isVideoBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "VideoBlock";

// src/objects/VideoTarget.ts
var isVideoTarget = (obj) => (obj == null ? void 0 : obj.__typename) === "VideoTarget";

// src/objects/WebEmbedBlockFlavor.ts
var isWebEmbedBlockFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "WebEmbedBlockFlavor";

// src/blocks/WidgetBarBlock.ts
var isWidgetBarBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "WidgetBarBlock";

// src/objects/WidgetBarIcon.ts
var isWidgetBarIcon = (obj) => (obj == null ? void 0 : obj.__typename) === "WidgetBarIcon";

// src/blocks/WidgetLinkBlock.ts
var isWidgetLinkBlock = (obj) => (obj == null ? void 0 : obj.__typename) === "WidgetLinkBlock";

// src/objects/YouTubePlayerFlavor.ts
var isYouTubePlayerFlavor = (obj) => (obj == null ? void 0 : obj.__typename) === "YouTubePlayerFlavor";

// src/objects/httpResponse.ts
var ishttpResponse = (obj) => (obj == null ? void 0 : obj.__typename) === "httpResponse";

// src/unions/ActionResponse.ts
var isActionResponse = (obj) => (obj == null ? void 0 : obj.__typename) && ["BlockRemovalByGroupIdActionResponse", "BlockReplacementActionResponse", "BlockReplacementByIdActionResponse", "CompoundBlockModificationActionResponse", "ScreenReplacementActionResponse", "TargetActionResponse"].includes(obj.__typename);

// src/unions/BlockModification.ts
var isBlockModification = (obj) => (obj == null ? void 0 : obj.__typename) && ["BlockRemovalByGroupIdActionResponse", "BlockReplacementByIdActionResponse"].includes(obj.__typename);

// src/unions/EmbedBlockFlavor.ts
var isEmbedBlockFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["InfographicEmbedBlockFlavor", "TrackingPixelEmbedBlockFlavor", "TrackingPixelFlavor", "TwitterEmbedBlockFlavor", "WebEmbedBlockFlavor"].includes(obj.__typename);

// src/unions/FormElementFlavor.ts
var isFormElementFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["TextFieldFlavor"].includes(obj.__typename);

// src/unions/ImageFlavor.ts
var isImageFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["ArticleHeadImageFlavor", "FigureImageFlavor", "SizedImageFlavor"].includes(obj.__typename);

// src/unions/LinkFlavor.ts
var isLinkFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["ButtonLinkFlavor", "CTALinkFlavor", "CTAWithLargeTextLinkFlavor", "ImageLinkFlavor", "LargeArticleLinkFlavor", "MoreLinkFlavor", "RightIconButtonLinkFlavor", "SmallArticleLinkFlavor", "SubtitleLinkFlavor", "TextLinkFlavor", "TimelineLinkFlavor", "ToggleLinkFlavor"].includes(obj.__typename);

// src/unions/LiveDataEventSource.ts
var isLiveDataEventSource = (obj) => (obj == null ? void 0 : obj.__typename) && ["FirebaseRealTimeDataEventSource"].includes(obj.__typename);

// src/unions/ModalSheet.ts
var isModalSheet = (obj) => (obj == null ? void 0 : obj.__typename) && ["OnboardingSheet"].includes(obj.__typename);

// src/unions/Rule.ts
var isRule = (obj) => (obj == null ? void 0 : obj.__typename) && ["VariableEqualsRule", "VariableNotEqualsRule"].includes(obj.__typename);

// src/unions/ScoreboardWidget.ts
var isScoreboardWidget = (obj) => (obj == null ? void 0 : obj.__typename) && ["GraceNoteWidget"].includes(obj.__typename);

// src/unions/ScreenFlavor.ts
var isScreenFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["ArticleScreenFlavor", "OnboardingScreenFlavor", "SearchScreenFlavor"].includes(obj.__typename);

// src/unions/TextFlavor.ts
var isTextFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["IconTextFlavor", "LabelTextFlavor", "LabeledListItemTextFlavor", "ListItemTextFlavor", "SponsoredByTextFlavor"].includes(obj.__typename);

// src/unions/VideoFlavor.ts
var isVideoFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["ArticleHeaderVideoFlavor"].includes(obj.__typename);

// src/unions/VideoPlayerFlavor.ts
var isVideoPlayerFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["EmbedPlayerFlavor", "JWPlayerFlavor", "YouTubePlayerFlavor"].includes(obj.__typename);

// src/unions/WebContainerFlavor.ts
var isWebContainerFlavor = (obj) => (obj == null ? void 0 : obj.__typename) && ["ArticleMetaContainer", "ContentListContainer", "StyledWebContainer"].includes(obj.__typename);
export {
  AppNexusBannerType,
  ArticleMetaLocation,
  ButtonBarPresentationStyle,
  ButtonsPresentationStyle,
  CarouselStyle,
  Client,
  CookieEventOperation,
  CoreScreenName,
  FontStyle,
  FontWeight,
  GroupPosition,
  HeaderLevel,
  HeaderStyle,
  ImageStyle,
  LinkAlignment,
  LinkStyle,
  LinkWidth,
  LiveDataConnectionHandler,
  LottieRepeatMode,
  NavigationButtonState,
  PresentationStyle,
  ScreenBackgroundImageFillStyle,
  ScreenBehavior,
  ScreenBreakPoint,
  ScreenEntryPoint,
  ScreenPresentationStyle,
  SectionType,
  SuccessState,
  TargetPermission,
  TargetType,
  TextAlignment,
  TextRole,
  TextType,
  TimerLeavePolicy,
  TimerPolicy,
  TimerStartPolicy,
  TimerStopPolicy,
  TwitterAlign,
  TwitterCards,
  TwitterConversation,
  UrlRelation,
  VerticalAlignment,
  VideoTargetType,
  WidgetBarStyle,
  isActionMenu,
  isActionMenuItem,
  isActionMenuTarget,
  isActionResponse,
  isAdvertisementDataKeyValue,
  isAppNexusBannerSize,
  isAppNexusKeyword,
  isArticleHeadImageFlavor,
  isArticleHeaderVideoFlavor,
  isArticleMetaContainer,
  isArticleScreenFlavor,
  isAudioBlock,
  isAudioTarget,
  isBFFEvent,
  isBannerBlock,
  isBarButton,
  isBlankEvent,
  isBlockModification,
  isBlockPage,
  isBlockRemovalByGroupIdActionResponse,
  isBlockReplacementActionResponse,
  isBlockReplacementByIdActionResponse,
  isBlockTrackers,
  isButtonBarBlock,
  isButtonLinkFlavor,
  isCTALinkFlavor,
  isCTAWithLargeTextLinkFlavor,
  isCarouselLinkBlock,
  isClientSideTimelineBlock,
  isColorTheme,
  isCommentBlock,
  isCommentUsernameLabel,
  isCompoundBlockModificationActionResponse,
  isConsentTarget,
  isContainerBlock,
  isContentListContainer,
  isContentPartner,
  isContributionTarget,
  isCookieEvent,
  isCxenseEvent,
  isDataLayerScreenViewEvent,
  isDataLayerScreenViewKeyValue,
  isDetailBlock,
  isDismissTarget,
  isDividerBlock,
  isEmbedBlock,
  isEmbedBlockFlavor,
  isEmbedPlayerFlavor,
  isErrorBlock,
  isEventResponse,
  isFigureImageFlavor,
  isFirebaseRealTimeDataEventSource,
  isFirebaseScreenViewEvent,
  isFirebaseScreenViewKeyValue,
  isFirebaseTrackingEvent,
  isFirebaseTrackingKeyValue,
  isFontInfo,
  isFormElementBlock,
  isFormElementFlavor,
  isFormSubmitTarget,
  isGTMDataKeyValue,
  isGTMEvent,
  isGTMLinkAttributes,
  isGTMTrackers,
  isGenericImage,
  isGoogleEvent,
  isGoogleIndexedParam,
  isGoogleKeyValue,
  isGooglePageviewEvent,
  isGraceNoteWidget,
  isGraphic,
  isGrid,
  isHeaderBlock,
  isHeaderButton,
  isHttpEvent,
  isHttpHeader,
  isHyperLinkTarget,
  isIconTextFlavor,
  isImageBlock,
  isImageFlavor,
  isImageLinkFlavor,
  isImageSlideshowSlide,
  isInfographicEmbedBlockFlavor,
  isInternalBlockTarget,
  isJWPlayerFlavor,
  isJWPlayerVideoTarget,
  isLabelTextFlavor,
  isLabeledListItemTextFlavor,
  isLargeArticleLinkFlavor,
  isLegacyTimelineAdZone,
  isLegacyTimelineInfo,
  isLink,
  isLinkBlock,
  isLinkFlavor,
  isListItemTextFlavor,
  isLiveDataConnectionAction,
  isLiveDataEventSource,
  isLoginTarget,
  isLogoutTarget,
  isLottieAnimation,
  isMenuItem,
  isMenuItemBlock,
  isMenus,
  isModalSheet,
  isMoreLinkFlavor,
  isNoboEvent,
  isNoboKeyValue,
  isOnboardingImage,
  isOnboardingScreen,
  isOnboardingScreenFlavor,
  isOnboardingSheet,
  isPipTrackingEvent,
  isPlaceholderBlock,
  isPushNotificationTrackers,
  isPushSubscribeTarget,
  isQuery,
  isReadStateEvent,
  isRecommendedArticles,
  isRemoteTarget,
  isRightIconButtonLinkFlavor,
  isRule,
  isSacEvent,
  isSacPageviewEvent,
  isSacPageviewKeyValue,
  isScoreboardBlock,
  isScoreboardBlockActive,
  isScoreboardWidget,
  isScoreboardWidgetSet,
  isScreen,
  isScreenActions,
  isScreenBackgroundImage,
  isScreenFlavor,
  isScreenMetadataKeyValue,
  isScreenOgDataKeyValue,
  isScreenReplacementActionResponse,
  isScreenTarget,
  isScreenTrackers,
  isSearchScreenFlavor,
  isSetVariableEvent,
  isSetVariablesTarget,
  isShareTarget,
  isSizedImageFlavor,
  isSlideshow,
  isSlideshowTarget,
  isSmallArticleLinkFlavor,
  isSourceBlock,
  isSponsoredByTextFlavor,
  isStyledText,
  isStyledWebContainer,
  isStyledWebContainerAttribute,
  isSubMenuItem,
  isSubtitleLinkFlavor,
  isTargetActionResponse,
  isTargetTrackers,
  isTextBlock,
  isTextFieldFlavor,
  isTextFlavor,
  isTextLinkFlavor,
  isThemedUrl,
  isTimelineLinkFlavor,
  isTimeoutAction,
  isTimerSettings,
  isToggleLinkFlavor,
  isTrackingPixelEmbedBlockFlavor,
  isTrackingPixelFlavor,
  isTwitterCardDataKeyValue,
  isTwitterEmbedBlockFlavor,
  isUrlTarget,
  isUsabillaEvent,
  isVariable,
  isVariableEqualsRule,
  isVariableNotEqualsRule,
  isVideoBlock,
  isVideoFlavor,
  isVideoPlayerFlavor,
  isVideoTarget,
  isWebContainerFlavor,
  isWebEmbedBlockFlavor,
  isWidgetBarBlock,
  isWidgetBarIcon,
  isWidgetLinkBlock,
  isYouTubePlayerFlavor,
  ishttpResponse
};
